ANSI-C/cC++ Compiler for HC08 V-5.0.39 Build 11346, Dec 13 2011

    1:  /*****************************************************************************
    2:  * Source file for Utilities.
    3:  * 
    4:  * 
    5:  * Copyright (c) 2009, Freescale, Inc. All rights reserved.
    6:  *
    7:  * 
    8:  * No part of this document must be reproduced in any form - including copied,
    9:  * transcribed, printed or by any electronic means - without specific written
   10:  * permission from Freescale Semiconductor.
   11:  *
   12:  *****************************************************************************/
   13:  
   14:  #include "Utilities_Interface.h"
   15:  
   16:  #pragma MESSAGE DISABLE C5651
   17:  
   18:  /************************************************************************************
   19:  * Delay_ms
   20:  *
   21:  ************************************************************************************/
   22:  void Delay_ms
   23:  (
   24:    uint16_t u16ms
   25:  ) 
   26:  {                                            
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7fe     [2]             AIS   #-2
   27:    uint16_t u16ctr;                                          
   28:    for(u16ctr = 0; u16ctr < ((gSystemClock_d/40000)*u16ms); u16ctr++){
  0004 95       [2]             TSX   
  0005 6f01     [5]             CLR   1,X
  0007 7f       [4]             CLR   ,X
  0008 2008     [3]             BRA   L12 ;abs = 0012
  000a          LA:     
   29:      asm NOP; 
  000a 9d       [1]             NOP   
   30:      asm NOP;
  000b 9d       [1]             NOP   
  000c 95       [2]             TSX   
  000d 6c01     [5]             INC   1,X
  000f 2601     [3]             BNE   L12 ;abs = 0012
  0011 7c       [4]             INC   ,X
  0012          L12:    
  0012 9efe03   [5]             LDHX  3,SP
  0015 4f       [1]             CLRA  
  0016 89       [2]             PSHX  
  0017 8b       [2]             PSHH  
  0018 87       [2]             PSHA  
  0019 87       [2]             PSHA  
  001a 95       [2]             TSX   
  001b 89       [2]             PSHX  
  001c 8b       [2]             PSHH  
  001d 9efe07   [5]             LDHX  7,SP
  0020 8a       [3]             PULH  
  0021 89       [2]             PSHX  
  0022 9eee02   [4]             LDX   2,SP
  0025 cd0000   [6]             JSR   _LMUL_RC
  0028 000000c8         DC.L  200
  002c 95       [2]             TSX   
  002d ee04     [3]             LDX   4,X
  002f 89       [2]             PSHX  
  0030 95       [2]             TSX   
  0031 e60b     [3]             LDA   11,X
  0033 87       [2]             PSHA  
  0034 4f       [1]             CLRA  
  0035 87       [2]             PSHA  
  0036 87       [2]             PSHA  
  0037 95       [2]             TSX   
  0038 89       [2]             PSHX  
  0039 8b       [2]             PSHH  
  003a af04     [2]             AIX   #4
  003c cd0000   [6]             JSR   _LCMP
  003f a70e     [2]             AIS   #14
  0041 92c7     [3]             BGT   LA ;abs = 000a
   31:    }    
   32:  }
  0043 a704     [2]             AIS   #4
  0045 8d       [7]             RTC   
   33:  
   34:  /************************************************************************************
   35:  * Delay_us
   36:  *
   37:  ************************************************************************************/
   38:  void Delay_us
   39:  (
   40:    uint16_t u16us
   41:  ) 
   42:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7fe     [2]             AIS   #-2
   43:    uint16_t u16ctr;                                          
   44:    for(u16ctr = 0; u16ctr < (((gSystemClock_d*10/40000000)*u16us)/10); u16ctr++){
  0004 95       [2]             TSX   
  0005 6f01     [5]             CLR   1,X
  0007 7f       [4]             CLR   ,X
  0008 2008     [3]             BRA   L12 ;abs = 0012
  000a          LA:     
   45:      asm NOP; 
  000a 9d       [1]             NOP   
   46:      asm NOP;     
  000b 9d       [1]             NOP   
  000c 95       [2]             TSX   
  000d 6c01     [5]             INC   1,X
  000f 2601     [3]             BNE   L12 ;abs = 0012
  0011 7c       [4]             INC   ,X
  0012          L12:    
  0012 9efe03   [5]             LDHX  3,SP
  0015 4f       [1]             CLRA  
  0016 89       [2]             PSHX  
  0017 8b       [2]             PSHH  
  0018 87       [2]             PSHA  
  0019 87       [2]             PSHA  
  001a 95       [2]             TSX   
  001b 4c       [1]             INCA  
  001c cd0000   [6]             JSR   _LLSL
  001f 95       [2]             TSX   
  0020 cd0000   [6]             JSR   _LDIVU_RC
  0023 0000000a         DC.L  10
  0027 95       [2]             TSX   
  0028 e602     [3]             LDA   2,X
  002a 87       [2]             PSHA  
  002b ee03     [3]             LDX   3,X
  002d 8a       [3]             PULH  
  002e 9ef30d   [6]             CPHX  13,SP
  0031 a70c     [2]             AIS   #12
  0033 22d5     [3]             BHI   LA ;abs = 000a
   47:    }      
   48:  }
  0035 a704     [2]             AIS   #4
  0037 8d       [7]             RTC   
   49:  
   50:  
   51:   
   52:  /*******************************************************************************  
   53:  * HexToAscii
   54:  *
   55:  * This function converts an hexadecimal value in ascii code.
   56:  *******************************************************************************/
   57:  uint8_t HexToAscii(uint8_t u8Hex)
   58:  {
   59:    u8Hex &= 0x0F;
  0000 a40f     [2]             AND   #15
   60:    return u8Hex + ((u8Hex <= 9) ? '0' : ('A'-10));
  0002 a109     [2]             CMP   #9
  0004 2303     [3]             BLS   L9 ;abs = 0009
  0006 ae37     [2]             LDX   #55
  0008 65       [3]             SKIP2 LB ;abs = 000b
  0009          L9:     
  0009 ae30     [2]             LDX   #48
  000b          LB:     
  000b 89       [2]             PSHX  
  000c 95       [2]             TSX   
  000d fb       [3]             ADD   ,X
  000e 8a       [3]             PULH  
   61:  }
  000f 8d       [7]             RTC   
   62:  
   63:  
   64:  
   65:  /**************************************************************************************/
   66:  
   67:  
   68:  
   69:  /************************************************************************************
   70:  * convert_2_bcd function
   71:  *
   72:  * This function converts the received data as parameter to bcd format
   73:  *
   74:  ************************************************************************************/
   75:  sixDigitBcd_t convert_2_bcd(uint16_t u16Value)
   76:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7fb     [2]             AIS   #-5
   77:    sixDigitBcd_t u16RtrnVal;
   78:    uint16_t tmp;
   79:    u16RtrnVal.u8Units = 0;
  0004 9ee601   [4]             LDA   1,SP
  0007 a4f0     [2]             AND   #-16
  0009 9ee701   [4]             STA   1,SP
   80:    u16RtrnVal.u8Tens = 0;
  000c a40f     [2]             AND   #15
  000e 9ee701   [4]             STA   1,SP
   81:    u16RtrnVal.u8Houndreds = 0;
  0011 9ee602   [4]             LDA   2,SP
  0014 a4f0     [2]             AND   #-16
  0016 9ee702   [4]             STA   2,SP
   82:    u16RtrnVal.u8Thousands = 0;
  0019 a40f     [2]             AND   #15
  001b 9ee702   [4]             STA   2,SP
   83:    u16RtrnVal.u8TensThousands = 0;
  001e 9ee603   [4]             LDA   3,SP
  0021 a4f0     [2]             AND   #-16
  0023 9ee703   [4]             STA   3,SP
   84:    u16RtrnVal.u8HoundredsThousands = 0;
  0026 a40f     [2]             AND   #15
  0028 9ee703   [4]             STA   3,SP
   85:    if(65535 > u16Value)
  002b 65ffff   [3]             CPHX  #-1
  002e 2503     [3]             BCS   L33 ;abs = 0033
  0030 cc0111   [4]             JMP   L111 ;abs = 0111
  0033          L33:    
   86:    {
   87:      tmp = u16Value;
  0033 9eff04   [5]             STHX  4,SP
   88:      if(10000 <= u16Value)
  0036 652710   [3]             CPHX  #10000
  0039 252f     [3]             BCS   L6A ;abs = 006a
   89:      {
   90:        tmp = u16Value/10000;
  003b 89       [2]             PSHX  
  003c 8b       [2]             PSHH  
  003d 452710   [3]             LDHX  #10000
  0040 cd0000   [6]             JSR   _IDIVU_STAR08
  0043 a702     [2]             AIS   #2
  0045 9eff04   [5]             STHX  4,SP
   91:        u16RtrnVal.u8TensThousands = (uint8_t)tmp;
  0048 95       [2]             TSX   
  0049 e604     [3]             LDA   4,X
  004b e802     [3]             EOR   2,X
  004d a40f     [2]             AND   #15
  004f e802     [3]             EOR   2,X
  0051 e702     [3]             STA   2,X
   92:        tmp = u16Value%10000;
  0053 e606     [3]             LDA   6,X
  0055 87       [2]             PSHA  
  0056 e605     [3]             LDA   5,X
  0058 87       [2]             PSHA  
  0059 a627     [2]             LDA   #39
  005b 87       [2]             PSHA  
  005c 8a       [3]             PULH  
  005d ae10     [2]             LDX   #16
  005f cd0000   [6]             JSR   _IMODU_STAR08
  0062 a702     [2]             AIS   #2
  0064 9eff04   [5]             STHX  4,SP
   93:        u16Value = tmp;
  0067 9eff06   [5]             STHX  6,SP
  006a          L6A:    
   94:      }
   95:  
   96:      if(1000 <= u16Value)
  006a 9efe06   [5]             LDHX  6,SP
  006d 6503e8   [3]             CPHX  #1000
  0070 2532     [3]             BCS   LA4 ;abs = 00a4
   97:      {
   98:        tmp = u16Value/1000;
  0072 89       [2]             PSHX  
  0073 8b       [2]             PSHH  
  0074 4503e8   [3]             LDHX  #1000
  0077 cd0000   [6]             JSR   _IDIVU_STAR08
  007a a702     [2]             AIS   #2
  007c 9eff04   [5]             STHX  4,SP
   99:        u16RtrnVal.u8Thousands = (uint8_t)tmp;
  007f 95       [2]             TSX   
  0080 e604     [3]             LDA   4,X
  0082 62       [1]             NSA   
  0083 a4f0     [2]             AND   #-16
  0085 e801     [3]             EOR   1,X
  0087 a4f0     [2]             AND   #-16
  0089 e801     [3]             EOR   1,X
  008b e701     [3]             STA   1,X
  100:        tmp = u16Value%1000;
  008d e606     [3]             LDA   6,X
  008f 87       [2]             PSHA  
  0090 e605     [3]             LDA   5,X
  0092 87       [2]             PSHA  
  0093 a603     [2]             LDA   #3
  0095 87       [2]             PSHA  
  0096 8a       [3]             PULH  
  0097 aee8     [2]             LDX   #-24
  0099 cd0000   [6]             JSR   _IMODU_STAR08
  009c a702     [2]             AIS   #2
  009e 9eff04   [5]             STHX  4,SP
  101:        u16Value = tmp;
  00a1 9eff06   [5]             STHX  6,SP
  00a4          LA4:    
  102:      }
  103:      if(100 <= u16Value)
  00a4 9efe06   [5]             LDHX  6,SP
  00a7 650064   [3]             CPHX  #100
  00aa 252c     [3]             BCS   LD8 ;abs = 00d8
  104:      {
  105:        tmp = u16Value/100;
  00ac 89       [2]             PSHX  
  00ad 8b       [2]             PSHH  
  00ae ae64     [2]             LDX   #100
  00b0 8c       [1]             CLRH  
  00b1 cd0000   [6]             JSR   _IDIVU_STAR08
  00b4 a702     [2]             AIS   #2
  00b6 9eff04   [5]             STHX  4,SP
  106:        u16RtrnVal.u8Houndreds = (uint8_t)tmp;
  00b9 95       [2]             TSX   
  00ba e604     [3]             LDA   4,X
  00bc e801     [3]             EOR   1,X
  00be a40f     [2]             AND   #15
  00c0 e801     [3]             EOR   1,X
  00c2 e701     [3]             STA   1,X
  107:        tmp = u16Value%100;
  00c4 e606     [3]             LDA   6,X
  00c6 87       [2]             PSHA  
  00c7 e605     [3]             LDA   5,X
  00c9 87       [2]             PSHA  
  00ca 8c       [1]             CLRH  
  00cb ae64     [2]             LDX   #100
  00cd cd0000   [6]             JSR   _IMODU_STAR08
  00d0 a702     [2]             AIS   #2
  00d2 9eff04   [5]             STHX  4,SP
  108:        u16Value = tmp;
  00d5 9eff06   [5]             STHX  6,SP
  00d8          LD8:    
  109:      }
  110:      if(10 <= u16Value)
  00d8 9efe06   [5]             LDHX  6,SP
  00db 65000a   [3]             CPHX  #10
  00de 2529     [3]             BCS   L109 ;abs = 0109
  111:      {
  112:        tmp = u16Value/10;
  00e0 89       [2]             PSHX  
  00e1 8b       [2]             PSHH  
  00e2 ae0a     [2]             LDX   #10
  00e4 8c       [1]             CLRH  
  00e5 cd0000   [6]             JSR   _IDIVU_STAR08
  00e8 a702     [2]             AIS   #2
  00ea 9eff04   [5]             STHX  4,SP
  113:        u16RtrnVal.u8Tens = (uint8_t)tmp;
  00ed 95       [2]             TSX   
  00ee e604     [3]             LDA   4,X
  00f0 62       [1]             NSA   
  00f1 a4f0     [2]             AND   #-16
  00f3 f8       [3]             EOR   ,X
  00f4 a4f0     [2]             AND   #-16
  00f6 f8       [3]             EOR   ,X
  00f7 f7       [2]             STA   ,X
  114:        tmp = u16Value%10;
  00f8 e606     [3]             LDA   6,X
  00fa 87       [2]             PSHA  
  00fb e605     [3]             LDA   5,X
  00fd 87       [2]             PSHA  
  00fe 8c       [1]             CLRH  
  00ff ae0a     [2]             LDX   #10
  0101 cd0000   [6]             JSR   _IMODU_STAR08
  0104 a702     [2]             AIS   #2
  0106 9eff04   [5]             STHX  4,SP
  0109          L109:   
  115:        u16Value = tmp;
  116:      }
  117:      u16RtrnVal.u8Units = (uint8_t)tmp;
  0109 95       [2]             TSX   
  010a e604     [3]             LDA   4,X
  010c f8       [3]             EOR   ,X
  010d a40f     [2]             AND   #15
  010f f8       [3]             EOR   ,X
  0110 f7       [2]             STA   ,X
  0111          L111:   
  118:    }
  119:    return u16RtrnVal;
  0111 9efe0b   [5]             LDHX  11,SP
  0114 9ee601   [4]             LDA   1,SP
  0117 f7       [2]             STA   ,X
  0118 9ee602   [4]             LDA   2,SP
  011b e701     [3]             STA   1,X
  011d 9ee603   [4]             LDA   3,SP
  0120 e702     [3]             STA   2,X
  120:  } 
  0122 a707     [2]             AIS   #7
  0124 8d       [7]             RTC   
  121:  
  122:  uint8_t HexaToAscii(uint8_t u8Hex)
  123:  {
  124:    u8Hex &= 0x0F;
  0000 a40f     [2]             AND   #15
  125:    return u8Hex + ((u8Hex <= 9) ? '0' : ('A'-10));
  0002 a109     [2]             CMP   #9
  0004 2303     [3]             BLS   L9 ;abs = 0009
  0006 ae37     [2]             LDX   #55
  0008 65       [3]             SKIP2 LB ;abs = 000b
  0009          L9:     
  0009 ae30     [2]             LDX   #48
  000b          LB:     
  000b 89       [2]             PSHX  
  000c 95       [2]             TSX   
  000d fb       [3]             ADD   ,X
  000e 8a       [3]             PULH  
  126:  }
  000f 8d       [7]             RTC   
  127:  
  128:  /************************************************************************************
  129:  * stringComp
  130:  *
  131:  * ...
  132:  *
  133:  ************************************************************************************/
  134:  bool_t stringComp(uint8_t * au8leftString, uint8_t * au8RightString, uint8_t bytesToCompare)
  135:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 87       [2]             PSHA  
  0003          L3:     
  136:    do
  137:    {
  138:    }while((*au8leftString++ == *au8RightString++) && --bytesToCompare);
  0003 9efe07   [5]             LDHX  7,SP
  0006 89       [2]             PSHX  
  0007 8b       [2]             PSHH  
  0008 af01     [2]             AIX   #1
  000a 9eff09   [5]             STHX  9,SP
  000d 9efe04   [5]             LDHX  4,SP
  0010 f6       [3]             LDA   ,X
  0011 af01     [2]             AIX   #1
  0013 9eff04   [5]             STHX  4,SP
  0016 8a       [3]             PULH  
  0017 88       [3]             PULX  
  0018 f1       [3]             CMP   ,X
  0019 2603     [3]             BNE   L1E ;abs = 001e
  001b 95       [2]             TSX   
  001c 7be5     [6]             DBNZ  X,L3 ;abs = 0003
  001e          L1E:    
  139:    return(0 == bytesToCompare);
  001e 95       [2]             TSX   
  001f 7d       [3]             TST   ,X
  0020 2702     [3]             BEQ   L24 ;abs = 0024
  0022 4f       [1]             CLRA  
  0023 65       [3]             SKIP2 L26 ;abs = 0026
  0024          L24:    
  0024 a601     [2]             LDA   #1
  0026          L26:    
  140:  }
  0026 a703     [2]             AIS   #3
  0028 8d       [7]             RTC   
  141:  
  142:  
  143:  /************************************************************************************
  144:  * MemoryCpy
  145:  *
  146:  * This function copy a buffer source to a buffer destination
  147:  *
  148:  ************************************************************************************/
  149:  
  150:  void MemoryCpy
  151:  (
  152:    void *pDst, // Destination buffer
  153:    void *pSrc, // Source buffer
  154:    uint8_t n   // Byte count
  155:  )
  156:  {
  0000 87       [2]             PSHA  
  157:      // Code looks weird, but is quite optimal on a HCS08 CPU
  158:    while(n) {
  0001 2013     [3]             BRA   L16 ;abs = 0016
  0003          L3:     
  159:      *((uint8_t *)pDst) = *((uint8_t *)pSrc);
  0003 f6       [3]             LDA   ,X
  0004 89       [2]             PSHX  
  0005 8b       [2]             PSHH  
  0006 9efe07   [5]             LDHX  7,SP
  0009 f7       [2]             STA   ,X
  160:      pDst=((uint8_t *)pDst)+1;
  000a af01     [2]             AIX   #1
  000c 9eff07   [5]             STHX  7,SP
  161:      pSrc=((uint8_t *)pSrc)+1;
  000f 8a       [3]             PULH  
  0010 88       [3]             PULX  
  0011 af01     [2]             AIX   #1
  162:      n--;
  0013 9e6a01   [6]             DEC   1,SP
  0016          L16:    
  0016 9e6d01   [5]             TST   1,SP
  0019 26e8     [3]             BNE   L3 ;abs = 0003
  163:    }
  164:  }
  001b 8a       [3]             PULH  
  001c 8d       [7]             RTC   
  165:  
  166:  /************************************************************************************
  167:  * MemorySet
  168:  *
  169:  * This function set an specific value into a buffer destination
  170:  *
  171:  ************************************************************************************/
  172:  
  173:  void MemorySet
  174:  (
  175:    void *pDst,    // Buffer to be reset
  176:    uint8_t value, // Byte value
  177:    uint8_t cnt    // Byte count
  178:  )
  179:  {
  0000 89       [2]             PSHX  
  180:    while(cnt) {
  0001 2010     [3]             BRA   L13 ;abs = 0013
  0003          L3:     
  181:      ((uint8_t *)pDst)[--cnt] = value;
  0003 4a       [1]             DECA  
  0004 87       [2]             PSHA  
  0005 95       [2]             TSX   
  0006 eb06     [3]             ADD   6,X
  0008 87       [2]             PSHA  
  0009 4f       [1]             CLRA  
  000a e905     [3]             ADC   5,X
  000c 87       [2]             PSHA  
  000d e601     [3]             LDA   1,X
  000f 8a       [3]             PULH  
  0010 88       [3]             PULX  
  0011 f7       [2]             STA   ,X
  0012 86       [3]             PULA  
  0013          L13:    
  0013 4d       [1]             TSTA  
  0014 26ed     [3]             BNE   L3 ;abs = 0003
  182:    }
  183:  }
  0016 8a       [3]             PULH  
  0017 8d       [7]             RTC   
  184:  
  185:  /**************************************************************************************/
  186:  void PrintByteOnHexFormatBlocking(uint8_t u8Byte, bool_t bPrintComma, uartPortNumber_t port)
  187:  {
  0000 87       [2]             PSHA  
  188:    static uint8_t HexString[4] = {0};
  189:      
  190:    HexString[0] = HexToAscii(u8Byte>>4);
  0001 9ee605   [4]             LDA   5,SP
  0004 62       [1]             NSA   
  0005 a40f     [2]             AND   #15
  0007 89       [2]             PSHX  
  0008 ac000000 [8]             CALL  HexToAscii
  000c c70000   [4]             STA   HexString
  191:    HexString[1] = HexToAscii(u8Byte);
  000f 95       [2]             TSX   
  0010 e605     [3]             LDA   5,X
  0012 ac000000 [8]             CALL  HexToAscii
  0016 c70001   [4]             STA   HexString:1
  192:    if(bPrintComma){
  0019 86       [3]             PULA  
  001a 4d       [1]             TSTA  
  001b 2703     [3]             BEQ   L20 ;abs = 0020
  193:      HexString[2] = ',';  
  001d a62c     [2]             LDA   #44
  194:    }else{
  001f 21       [3]             SKIP1 L21 ;abs = 0021
  0020          L20:    
  195:      HexString[2] = 0;      
  0020 4f       [1]             CLRA  
  0021          L21:    
  0021 c70002   [4]             STA   HexString:2
  196:    }
  197:    HexString[3] = 0;      
  0024 4f       [1]             CLRA  
  0025 c70003   [4]             STA   HexString:3
  198:    
  199:    (void)Uart_BlockingStringTx(HexString, port);
  0028 450000   [3]             LDHX  @HexString
  002b 9ee601   [4]             LDA   1,SP
  002e ac000000 [8]             CALL  Uart_BlockingStringTx
  200:  }
  0032 8a       [3]             PULH  
  0033 8d       [7]             RTC   
  201:  
  202:  
  203:  /**************************************************************************************/
  204:  void PrintWordOnDecimalFormatBlocking(uint16_t u16Dec, uint8_t u8MinDigs,bool_t bNegative, uartPortNumber_t port)
  205:  {
  0000 89       [2]             PSHX  
  0001 87       [2]             PSHA  
  0002 a7fd     [2]             AIS   #-3
  206:    static uint8_t decString[7] = {0};
  207:    uint8_t ind,Sing;
  208:      
  209:    int2BCD(u16Dec, &decString[1]);
  0004 9efe0a   [5]             LDHX  10,SP
  0007 89       [2]             PSHX  
  0008 8b       [2]             PSHH  
  0009 450001   [3]             LDHX  @decString:1
  000c ac000000 [8]             CALL  int2BCD
  0010 a702     [2]             AIS   #2
  210:    
  211:    Sing=0;
  0012 95       [2]             TSX   
  0013 6f01     [5]             CLR   1,X
  212:    decString[0]=0;
  0015 4f       [1]             CLRA  
  0016 c70000   [4]             STA   decString
  213:    if(u8MinDigs > 5) u8MinDigs = 5;
  0019 e608     [3]             LDA   8,X
  001b a105     [2]             CMP   #5
  001d 2309     [3]             BLS   L28 ;abs = 0028
  001f a605     [2]             LDA   #5
  0021 e708     [3]             STA   8,X
  0023 2003     [3]             BRA   L28 ;abs = 0028
  0025          L25:    
  214:    while((0 == decString[Sing+1]) && (Sing < 5-u8MinDigs)){
  215:      Sing++; 
  0025 95       [2]             TSX   
  0026 6c01     [5]             INC   1,X
  0028          L28:    
  0028 ee01     [3]             LDX   1,X
  002a 8c       [1]             CLRH  
  002b d60001   [4]             LDA   @decString:1,X
  002e 2615     [3]             BNE   L45 ;abs = 0045
  0030 a605     [2]             LDA   #5
  0032 9ee009   [4]             SUB   9,SP
  0035 87       [2]             PSHA  
  0036 4f       [1]             CLRA  
  0037 a200     [2]             SBC   #0
  0039 89       [2]             PSHX  
  003a 8b       [2]             PSHH  
  003b 97       [1]             TAX   
  003c 9ee603   [4]             LDA   3,SP
  003f cd0000   [6]             JSR   _ICMP
  0042 8a       [3]             PULH  
  0043 92e0     [3]             BGT   L25 ;abs = 0025
  0045          L45:    
  216:    }
  217:    for(ind=Sing;ind<6;ind++){
  0045 95       [2]             TSX   
  0046 e601     [3]             LDA   1,X
  0048 e702     [3]             STA   2,X
  004a 200f     [3]             BRA   L5B ;abs = 005b
  004c          L4C:    
  218:      decString[ind] += '0';  
  004c 95       [2]             TSX   
  004d ee02     [3]             LDX   2,X
  004f 8c       [1]             CLRH  
  0050 d60000   [4]             LDA   @decString,X
  0053 ab30     [2]             ADD   #48
  0055 d70000   [4]             STA   @decString,X
  0058 95       [2]             TSX   
  0059 6c02     [5]             INC   2,X
  005b          L5B:    
  005b e602     [3]             LDA   2,X
  005d a106     [2]             CMP   #6
  005f 25eb     [3]             BCS   L4C ;abs = 004c
  219:    }
  220:    if(bNegative){
  0061 6d04     [4]             TST   4,X
  0063 2709     [3]             BEQ   L6E ;abs = 006e
  221:      decString[Sing] = '-';
  0065 ee01     [3]             LDX   1,X
  0067 8c       [1]             CLRH  
  0068 a62d     [2]             LDA   #45
  006a d70000   [4]             STA   @decString,X
  222:    }else{
  006d 65       [3]             SKIP2 L70 ;abs = 0070
  006e          L6E:    
  223:      Sing++;
  006e 6c01     [5]             INC   1,X
  0070          L70:    
  224:    }
  225:    (void)Uart_BlockingStringTx(&decString[Sing], port);
  0070 95       [2]             TSX   
  0071 e601     [3]             LDA   1,X
  0073 ab00     [2]             ADD   @decString
  0075 f7       [2]             STA   ,X
  0076 4f       [1]             CLRA  
  0077 a900     [2]             ADC   @decString:MSB
  0079 fe       [3]             LDX   ,X
  007a 87       [2]             PSHA  
  007b 9ee605   [4]             LDA   5,SP
  007e 8a       [3]             PULH  
  007f ac000000 [8]             CALL  Uart_BlockingStringTx
  226:  }
  0083 a705     [2]             AIS   #5
  0085 8d       [7]             RTC   
  227:  
  228:  /**************************************************************************************/
  229:  void int2BCD(uint16_t u16Num, uint8_t * pu8BCDOut)
  230:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7fe     [2]             AIS   #-2
  231:    uint8_t cont=16;
  0004 a610     [2]             LDA   #16
  0006 95       [2]             TSX   
  0007 e701     [3]             STA   1,X
  232:    uint8_t aux=0;
  233:  
  234:    for (aux=0;aux<5;aux++){
  0009 4f       [1]             CLRA  
  000a          LA:     
  235:      pu8BCDOut[aux]=0;
  000a 87       [2]             PSHA  
  000b 95       [2]             TSX   
  000c eb04     [3]             ADD   4,X
  000e 87       [2]             PSHA  
  000f 4f       [1]             CLRA  
  0010 e903     [3]             ADC   3,X
  0012 87       [2]             PSHA  
  0013 8a       [3]             PULH  
  0014 88       [3]             PULX  
  0015 7f       [4]             CLR   ,X
  0016 86       [3]             PULA  
  0017 4c       [1]             INCA  
  0018 a105     [2]             CMP   #5
  001a 25ee     [3]             BCS   LA ;abs = 000a
  001c          L1C:    
  236:    }
  237:    do{
  238:      for(aux=0;aux<5;aux++) {
  001c 4f       [1]             CLRA  
  001d          L1D:    
  239:        pu8BCDOut[aux]<<=1;
  001d 87       [2]             PSHA  
  001e 95       [2]             TSX   
  001f eb04     [3]             ADD   4,X
  0021 87       [2]             PSHA  
  0022 4f       [1]             CLRA  
  0023 e903     [3]             ADC   3,X
  0025 87       [2]             PSHA  
  0026 8a       [3]             PULH  
  0027 88       [3]             PULX  
  0028 78       [4]             LSL   ,X
  0029 86       [3]             PULA  
  002a 4c       [1]             INCA  
  002b a105     [2]             CMP   #5
  002d 25ee     [3]             BCS   L1D ;abs = 001d
  240:      }
  241:      if(u16Num&0x8000){
  002f 95       [2]             TSX   
  0030 e607     [3]             LDA   7,X
  0032 2a05     [3]             BPL   L39 ;abs = 0039
  242:        pu8BCDOut[4]+=1;
  0034 9efe03   [5]             LDHX  3,SP
  0037 6c04     [5]             INC   4,X
  0039          L39:    
  243:      }
  244:      u16Num<<=1;
  0039 95       [2]             TSX   
  003a 6808     [5]             LSL   8,X
  003c 6907     [5]             ROL   7,X
  245:      for(aux=4;aux>0;aux--){
  003e a604     [2]             LDA   #4
  0040          L40:    
  246:        if (pu8BCDOut[aux]>=10){
  0040 87       [2]             PSHA  
  0041 95       [2]             TSX   
  0042 eb04     [3]             ADD   4,X
  0044 e701     [3]             STA   1,X
  0046 4f       [1]             CLRA  
  0047 e903     [3]             ADC   3,X
  0049 87       [2]             PSHA  
  004a ee01     [3]             LDX   1,X
  004c 8a       [3]             PULH  
  004d fe       [3]             LDX   ,X
  004e a30a     [2]             CPX   #10
  0050 86       [3]             PULA  
  0051 2511     [3]             BCS   L64 ;abs = 0064
  247:          pu8BCDOut[aux-1]++;
  0053 8b       [2]             PSHH  
  0054 9eee02   [4]             LDX   2,SP
  0057 afff     [2]             AIX   #-1
  0059 7c       [4]             INC   ,X
  248:          pu8BCDOut[aux]-=10;
  005a 95       [2]             TSX   
  005b ee01     [3]             LDX   1,X
  005d 8a       [3]             PULH  
  005e 87       [2]             PSHA  
  005f f6       [3]             LDA   ,X
  0060 a00a     [2]             SUB   #10
  0062 f7       [2]             STA   ,X
  0063 86       [3]             PULA  
  0064          L64:    
  0064 4bda     [4]             DBNZA L40 ;abs = 0040
  249:        }
  250:      }
  251:      cont--;
  0066 95       [2]             TSX   
  252:    }while(cont);
  0067 6b01b2   [7]             DBNZ  1,X,L1C ;abs = 001c
  253:  }
  006a a704     [2]             AIS   #4
  006c 8d       [7]             RTC   
  254:  
  255:  /**************************************************************************************/
  256:  #pragma MESSAGE DISABLE C4003
  257:  uint16_t HexString2Dec16(uint8_t * au8String)
  258:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7fb     [2]             AIS   #-5
  259:    uint8_t u8LocIndex=0;
  0004 95       [2]             TSX   
  0005 6f03     [5]             CLR   3,X
  260:    uint8_t u8LocIndex2=0;
  0007 6f04     [5]             CLR   4,X
  261:    uint16_t u16DecValue = 0;
  0009 6f02     [5]             CLR   2,X
  000b 6f01     [5]             CLR   1,X
  262:    
  263:    while(au8String[u8LocIndex]){
  000d 2003     [3]             BRA   L12 ;abs = 0012
  000f          LF:     
  264:      u8LocIndex++;
  000f 95       [2]             TSX   
  0010 6c03     [5]             INC   3,X
  0012          L12:    
  0012 ac00006f [8]             CALL  HexString2Dec16:111
  0016 7d       [3]             TST   ,X
  0017 2745     [3]             BEQ   L5E ;abs = 005e
  0019 20f4     [3]             BRA   LF ;abs = 000f
  001b          L1B:    
  001b ac00006f [8]             CALL  HexString2Dec16:111
  265:    }
  266:    
  267:    while(u8LocIndex--){
  268:      if((au8String[u8LocIndex] >= '0') && (au8String[u8LocIndex] <= '9'))
  001f f6       [3]             LDA   ,X
  0020 95       [2]             TSX   
  0021 f7       [2]             STA   ,X
  0022 a030     [2]             SUB   #48
  0024 a109     [2]             CMP   #9
  0026 2207     [3]             BHI   L2F ;abs = 002f
  269:       u16DecValue |= ((uint16_t)(au8String[u8LocIndex] - '0'))<<(u8LocIndex2*4);
  0028 f6       [3]             LDA   ,X
  0029 8c       [1]             CLRH  
  002a 97       [1]             TAX   
  002b afd0     [2]             AIX   #-48
  002d 2014     [3]             BRA   L43 ;abs = 0043
  002f          L2F:    
  270:      else if((au8String[u8LocIndex] >= 'A') && (au8String[u8LocIndex] <= 'F')){
  002f 95       [2]             TSX   
  0030 f6       [3]             LDA   ,X
  0031 a041     [2]             SUB   #65
  0033 a105     [2]             CMP   #5
  0035 2207     [3]             BHI   L3E ;abs = 003e
  271:       u16DecValue |= ((uint16_t)(au8String[u8LocIndex] - 'A' + 0x0A))<<(u8LocIndex2*4);    
  0037 f6       [3]             LDA   ,X
  0038 8c       [1]             CLRH  
  0039 97       [1]             TAX   
  003a afc9     [2]             AIX   #-55
  272:      }else{
  003c 2005     [3]             BRA   L43 ;abs = 0043
  003e          L3E:    
  273:       u16DecValue |= ((uint16_t)(au8String[u8LocIndex] - 'a' + 0x0A))<<(u8LocIndex2*4);        
  003e f6       [3]             LDA   ,X
  003f 8c       [1]             CLRH  
  0040 97       [1]             TAX   
  0041 afa9     [2]             AIX   #-87
  0043          L43:    
  0043 9ee605   [4]             LDA   5,SP
  0046 48       [1]             LSLA  
  0047 48       [1]             LSLA  
  0048 87       [2]             PSHA  
  0049 9f       [1]             TXA   
  004a 8b       [2]             PSHH  
  004b 88       [3]             PULX  
  004c cd0000   [6]             JSR   _ILSL
  004f 9eea04   [4]             ORA   4,SP
  0052 9ee704   [4]             STA   4,SP
  0055 8a       [3]             PULH  
  0056 9f       [1]             TXA   
  0057 95       [2]             TSX   
  0058 ea01     [3]             ORA   1,X
  005a e701     [3]             STA   1,X
  274:      }
  275:      u8LocIndex2++;
  005c 6c04     [5]             INC   4,X
  005e          L5E:    
  005e 95       [2]             TSX   
  005f e603     [3]             LDA   3,X
  0061 97       [1]             TAX   
  0062 4a       [1]             DECA  
  0063 9ee704   [4]             STA   4,SP
  0066 5d       [1]             TSTX  
  0067 26b2     [3]             BNE   L1B ;abs = 001b
  276:    }
  277:    
  278:    return u16DecValue;
  0069 9efe02   [5]             LDHX  2,SP
  279:    
  280:  }
  006c a707     [2]             AIS   #7
  006e 8d       [7]             RTC   
  006f          L6F:    
  006f 95       [2]             TSX   
  0070 e606     [3]             LDA   6,X
  0072 eb09     [3]             ADD   9,X
  0074 87       [2]             PSHA  
  0075 4f       [1]             CLRA  
  0076 e908     [3]             ADC   8,X
  0078 87       [2]             PSHA  
  0079 8a       [3]             PULH  
  007a 88       [3]             PULX  
  007b 8d       [7]             RTC   
  281:  
  282:  
