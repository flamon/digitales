ANSI-C/cC++ Compiler for HC08 V-5.0.39 Build 11346, Dec 13 2011

    1:  /******************************************************************************
    2:  * Source file for the MCU initialization driver for SMAC.
    3:  *
    4:  *
    5:  * (c) Copyright 2010, Freescale, Inc.  All rights reserved.
    6:  *
    7:  * No part of this document must be reproduced in any form - including copied,
    8:  * transcribed, printed or by any electronic means - without specific written
    9:  * permission from Freescale.
   10:  *
   11:  *******************************************************************************/
   12:  
   13:  #include "derivative.h"
   14:  /******************************************************************************
   15:  *******************************************************************************
   16:  * Private type definitions
   17:  *******************************************************************************
   18:  *******************************************************************************/
   19:  
   20:  /******************************************************************************
   21:  *******************************************************************************
   22:  * Private defines and macros
   23:  *******************************************************************************
   24:  *******************************************************************************/
   25:  
   26:  /******************************************************************************
   27:  *******************************************************************************
   28:  * Private constants
   29:  *******************************************************************************
   30:  *******************************************************************************/
   31:  
   32:  /******************************************************************************
   33:  *******************************************************************************
   34:  * Private prototypes
   35:  *******************************************************************************
   36:  *******************************************************************************/
   37:  
   38:  /******************************************************************************
   39:  *******************************************************************************
   40:  * Public memory declarations
   41:  *******************************************************************************
   42:  *******************************************************************************/
   43:  
   44:  /******************************************************************************
   45:  *******************************************************************************
   46:  * Private memory declarations
   47:  *******************************************************************************
   48:  *******************************************************************************/
   49:  
   50:  /******************************************************************************
   51:  *******************************************************************************
   52:  * Public functions
   53:  *******************************************************************************
   54:  *******************************************************************************/
   55:  
   56:  /******************************************************************************
   57:  *  MCUInit
   58:  *******************************************************************************/ 
   59:  #if defined(gMc1321xPlatform_d) | defined(gMcs08Gt60Platform_d)
   60:  void MCUInit(void)
   61:  {
   62:    SOPT = 0x72;                /* Turn off the watchdog. */  
   63:  }
   64:  #elif defined(gMcs08qe128Platform_d)
   65:  void MCUInit(void)
   66:  {
   67:    SOPT1 = 0x62;   
  0000 a662     [2]             LDA   #98
  0002 c70000   [4]             STA   _SOPT1
   68:    SPMSC2 = 0x03;     
  0005 a603     [2]             LDA   #3
  0007 c70000   [4]             STA   _SPMSC2
   69:  }
  000a 8d       [7]             RTC   
   70:  #elif defined(gMc1323xPlatform_d)
   71:  void MCUInit(void)
   72:  {
   73:    SOPT1 = 0x62;   
   74:    SPMSC2 = 0x03;      
   75:    SOMC1 = 0x04;
   76:    SOMC2 = gDefaultCrystalTrim_c;
   77:  }
   78:  #endif
   79:  
   80:  /******************************************************************************
   81:  *  MCU_SetInternalClock8Mhz
   82:  *******************************************************************************/ 
   83:  #if defined(gMc1321xPlatform_d) | defined(gMcs08Gt60Platform_d)
   84:  void MCU_SetInternalClock8Mhz(void)
   85:  {
   86:    ICGC1 = 0x44;                                      
   87:    ICGFLT = 0xC0;
   88:    ICGC2 = 0x00;                                      
   89:    ICGTRM = *(unsigned char*far)0xFFBE; 
   90:  }
   91:  #elif defined(gMcs08qe128Platform_d)
   92:  void MCU_SetInternalClock8Mhz(void)
   93:  {
   94:    ICSC1 = 0x04; 
  0000 6e0400   [4]             MOV   #4,_ICSC1
   95:    ICSC2 = 0x00; 
  0003 3f00     [5]             CLR   _ICSC2
  0005          L5:     
   96:    while(!ICSSC_IREFST) {/* Wait until the source of reference clock is internal clock */
  0005 0900fd   [5]             BRCLR 4,_ICSSC,L5 ;abs = 0005
   97:    }
   98:    ICSSC &= (unsigned char)~0xE0;
  0008 b600     [3]             LDA   _ICSSC
  000a a41f     [2]             AND   #31
  000c b700     [3]             STA   _ICSSC
  000e          LE:     
   99:    while((ICSSC & 0xC4) != 0x00) {
  000e b600     [3]             LDA   _ICSSC
  0010 a5c4     [2]             BIT   #-60
  0012 26fa     [3]             BNE   LE ;abs = 000e
  100:    }
  101:  }
  0014 8d       [7]             RTC   
  102:  #elif defined(gMc1323xPlatform_d)
  103:  void MCU_SetInternalClock8Mhz(void)
  104:  {
  105:     /*This function is not allowed on the mc1323x platform*/
  106:  }
  107:  #endif
  108:  
  109:  
  110:  /******************************************************************************
  111:  *  MCU_UseExternalClock
  112:  *******************************************************************************/ 
  113:  #if defined(gMc1321xPlatform_d) | defined(gMcs08Gt60Platform_d)
  114:  void MCU_UseExternalClock(void)
  115:  {
  116:      ICGC1 = 0x50;   
  117:      while (!ICGS1_ERCS); /* Wait for external reference to be stable. */
  118:      ICGC2_LOLRE = 1;
  119:      ICGC2_MFD = 0x00;  
  120:  }
  121:  #elif defined(gMcs08qe128Platform_d)
  122:  void MCU_UseExternalClock(void) 
  123:  {
  124:      ICSC1 = 0x80;
  0000 6e8000   [4]             MOV   #-128,_ICSC1
  125:      ICSC2 = 0x3A;
  0003 6e3a00   [4]             MOV   #58,_ICSC2
  126:      ICSSC = 0x60;
  0006 6e6000   [4]             MOV   #96,_ICSSC
  127:  }
  0009 8d       [7]             RTC   
  128:  #elif defined(gMc1323xPlatform_d)
  129:  void MCU_UseExternalClock(void)
  130:  {
  131:     /*This function is not allowed on the mc1323x platform*/
  132:  }
  133:  #endif
  134:  
  135:  /******************************************************************************
  136:  *  MCU_UseMcuClock
  137:  *******************************************************************************/ 
  138:  #if defined(gMc1321xPlatform_d) | defined(gMcs08Gt60Platform_d)
  139:  void MCU_UseMcuClock() 
  140:  {
  141:      ICGC1_RANGE = 1;        /* Range High. */
  142:      ICGC1_OSCSTEN = 1;      /* Osc enabled in off mode. */
  143:      ICGC1_CLKS = 0x00;      /* Self clocked. */            
  144:  }
  145:  #elif defined(gMcs08qe128Platform_d)
  146:  void MCU_UseMcuClock() //use_mcu_clock()
  147:  {
  148:      ICSC1 = 0x03;
  0000 6e0300   [4]             MOV   #3,_ICSC1
  149:      ICSC2 = 0x17;
  0003 6e1700   [4]             MOV   #23,_ICSC2
  150:      ICSTRM = ((*((unsigned char *)(0xFFAF))) +11);
  0006 c6ffaf   [4]             LDA   65455
  0009 ab0b     [2]             ADD   #11
  000b b700     [3]             STA   _ICSTRM
  151:      ICSSC = 0x61;     
  000d 6e6100   [4]             MOV   #97,_ICSSC
  152:  }
  0010 8d       [7]             RTC   
  153:  #elif defined(gMc1323xPlatform_d)
  154:  void MCU_UseMcuClock() //use_mcu_clock()
  155:  {
  156:     /*This function is not allowed on the mc1323x platform*/
  157:  }
  158:  #endif
  159:  
  160:  
  161:  
