ANSI-C/cC++ Compiler for HC08 V-5.0.39 Build 11346, Dec 13 2011

    1:  #include "McuInit.h"
    2:  #include "EmbeddedTypes.h"       
    3:  #include "SMAC_Interface.h"
    4:  #include "uMac.h"
    5:  #include "app_config.h"
    6:  #include "OTAP_Interface.h"
    7:  #include "PLM_config.h"
    8:  #include "Timer_Interface.h"
    9:  
   10:  #define MyID 1
   11:  #define NOISE_ENERGY 190
   12:  #define MAX_SEND_ATTEMPTS 5
   13:  
   14:  typedef enum {
   15:      uMac_NoInit,
   16:      uMac_Init,
   17:      uMac_WaitRx,
   18:      uMac_Rx,
   19:      uMac_Tx,
   20:      uMac_Timer
   21:  } uMac_Engine_State;
   22:  
   23:  static uMac_Engine_State uMac_Current_State;
   24:  static bool_t uMac_On = FALSE;
   25:  
   26:  static uint8_t gau8RxDataBuffer[130]; /* 123 bytes is the SDU max size in non
   27:                                           promiscuous mode. 
   28:                                           125 bytes is the SDU max size in 
   29:                                           promiscuous mode. 
   30:                                           You have to consider the SDU plus 5 more 
   31:                                           bytes for SMAC header and that the buffer 
   32:                                           can not be bigger than 130 */
   33:  static uint8_t gau8TxDataBuffer[128]; /* This buffer can be as big as the biggest
   34:                                           packet to transmit in the app plus 3 
   35:                                           bytes reserved for SMAC packet header.
   36:                                           The buffer can not be bigger than 128 */
   37:          
   38:  static txPacket_t *AppTxPacket;
   39:  static rxPacket_t *AppRxPacket;
   40:  
   41:  static uMac_Packet *uMac_RxPacket;
   42:  static uMac_Packet *uMac_TxPacket;
   43:  
   44:  bool_t bTxDone, bRxDone, bDoTx, bTimerFlag1 = FALSE, bTimerFlag2 = FALSE;
   45:  uint8_t uMacbroad = 254, ui = 0, send_attempts = 0;
   46:  channels_t bestChannel, Channels[] = {gChannel11_c, gChannel12_c, gChannel13_c, gChannel14_c, gChannel15_c,
   47:              gChannel16_c, gChannel17_c, gChannel18_c, gChannel19_c, gChannel20_c, gChannel21_c,
   48:              gChannel22_c, gChannel23_c, gChannel24_c, gChannel25_c, gChannel26_c};
   49:  
   50:  tmrChannelConfig_t timerConfig;
   51:  
   52:  void InitSmac (void);
   53:  void uMac_Txf (void);
   54:  void SetTimer (uint16_t, uint8_t);
   55:  
   56:  #ifdef MEMORY_MODEL_BANKED
   57:  #pragma CODE_SEG __NEAR_SEG NON_BANKED
   58:  #else
   59:  #pragma CODE_SEG DEFAULT
   60:  #endif /* MEMORY_MODEL_BANKED */
   61:  
   62:  void TimerCallBack1 (void);
   63:  void TimerCallBack2 (void);
   64:  
   65:  #pragma CODE_SEG DEFAULT
   66:  
   67:  void
   68:  Init_uMac (void)
   69:  {
   70:      InitSmac();
  0000 ac000000 [8]             CALL  InitSmac
   71:  
   72:      uMac_On = TRUE;
  0004 a601     [2]             LDA   #1
  0006 c70000   [4]             STA   uMac_On
   73:      uMac_RxPacket = (uMac_Packet *)AppRxPacket->smacPdu.u8Data;
  0009 320000   [5]             LDHX  AppRxPacket
  000c af05     [2]             AIX   #5
  000e 960000   [5]             STHX  uMac_RxPacket
   74:      uMac_TxPacket = (uMac_Packet *)AppTxPacket->smacPdu.u8Data;
  0011 320000   [5]             LDHX  AppTxPacket
  0014 af03     [2]             AIX   #3
  0016 960000   [5]             STHX  uMac_TxPacket
   75:      uMac_Current_State = uMac_NoInit;
  0019 4f       [1]             CLRA  
  001a c70000   [4]             STA   uMac_Current_State
   76:  }
  001d 8d       [7]             RTC   
   77:  
   78:  void
   79:  uMac_Txf (void)
   80:  {
   81:      bDoTx = TRUE;
  0000 a601     [2]             LDA   #1
  0002 c70000   [4]             STA   bDoTx
   82:  }
  0005 8d       [7]             RTC   
   83:  
   84:  void
   85:  SetTimer (uint16_t timerCount, uint8_t t)
   86:  {   
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 87       [2]             PSHA  
   87:      timerConfig.tmrChannel = gTmrChannel0_c;
  0003 4f       [1]             CLRA  
  0004 c70000   [4]             STA   timerConfig
   88:      timerConfig.tmrChannOptMode = gTmrOutputCompare_c;
  0007 4c       [1]             INCA  
  0008 c70001   [4]             STA   timerConfig:1
   89:      timerConfig.tmrCompareVal = timerCount; 
  000b 960003   [5]             STHX  timerConfig:3
   90:      timerConfig.tmrPinConfig.tmrOutCompState = gTmrPinNotUsedForOutComp_c;
  000e 5f       [1]             CLRX  
  000f cf0002   [4]             STX   timerConfig:2
   91:  
   92:      if (t == 1) {
  0012 95       [2]             TSX   
  0013 f1       [3]             CMP   ,X
  0014 2608     [3]             BNE   L1E ;abs = 001e
   93:          (void) Tmr_SetCallbackFunc(gTmr3_c, gTmrOverEvent_c, TimerCallBack1);
  0016 4c       [1]             INCA  
  0017 87       [2]             PSHA  
  0018 4f       [1]             CLRA  
  0019 450000   [3]             LDHX  @TimerCallBack1
   94:      } else {
  001c 2006     [3]             BRA   L24 ;abs = 0024
  001e          L1E:    
   95:          (void) Tmr_SetCallbackFunc(gTmr3_c, gTmrOverEvent_c, TimerCallBack2);
  001e 4c       [1]             INCA  
  001f 87       [2]             PSHA  
  0020 4f       [1]             CLRA  
  0021 450000   [3]             LDHX  @TimerCallBack2
  0024          L24:    
  0024 cd0000   [6]             JSR   Tmr_SetCallbackFunc
  0027 8a       [3]             PULH  
   96:      }
   97:      (void) Tmr_SetClkConfig(gTmr3_c, gTmrBusRateClk_c, gTmrClkDivBy128_c); //62500 cuentas por segundo
  0028 a602     [2]             LDA   #2
  002a 87       [2]             PSHA  
  002b ae01     [2]             LDX   #1
  002d a607     [2]             LDA   #7
  002f cd0000   [6]             JSR   Tmr_SetClkConfig
  0032 8a       [3]             PULH  
   98:      (void) Tmr_SetChannelConfig(gTmr3_c, &timerConfig);
  0033 a602     [2]             LDA   #2
  0035 450000   [3]             LDHX  @timerConfig
  0038 cd0000   [6]             JSR   Tmr_SetChannelConfig
   99:      (void) Tmr_Enable(gTmr3_c,gTmrClkDivBy128_c, timerCount);
  003b a602     [2]             LDA   #2
  003d 87       [2]             PSHA  
  003e a607     [2]             LDA   #7
  0040 9efe03   [5]             LDHX  3,SP
  0043 cd0000   [6]             JSR   Tmr_Enable
  100:  }
  0046 a704     [2]             AIS   #4
  0048 8d       [7]             RTC   
  101:  
  102:  void
  103:  uMac_Engine (void)
  104:  {   
  105:      switch (uMac_Current_State) {
  0000 c60000   [4]             LDA   uMac_Current_State
  0003 a105     [2]             CMP   #5
  0005 227a     [3]             BHI   L81 ;abs = 0081
  0007 4d       [1]             TSTA  
  0008 2718     [3]             BEQ   L22 ;abs = 0022
  000a 410175   [4]             CBEQA #1,L82 ;abs = 0082
  000d a102     [2]             CMP   #2
  000f 2603     [3]             BNE   L14 ;abs = 0014
  0011 cc0098   [4]             JMP   L98 ;abs = 0098
  0014          L14:    
  0014 a104     [2]             CMP   #4
  0016 2603     [3]             BNE   L1B ;abs = 001b
  0018 cc0145   [4]             JMP   L145 ;abs = 0145
  001b          L1B:    
  001b a105     [2]             CMP   #5
  001d 2662     [3]             BNE   L81 ;abs = 0081
  001f cc013c   [4]             JMP   L13C ;abs = 013c
  0022          L22:    
  106:      case uMac_NoInit:
  107:          if (uMac_On == TRUE) {
  0022 c60000   [4]             LDA   uMac_On
  0025 4b5a     [4]             DBNZA L81 ;abs = 0081
  108:              uMac_On = FALSE;
  0027 4f       [1]             CLRA  
  0028 c70000   [4]             STA   uMac_On
  109:              
  110:              if (ui == 16) {
  002b c60000   [4]             LDA   ui
  002e a110     [2]             CMP   #16
  0030 2604     [3]             BNE   L36 ;abs = 0036
  111:                  ui = 0;
  0032 4f       [1]             CLRA  
  0033 c70000   [4]             STA   ui
  0036          L36:    
  112:              }
  113:              
  114:              if (send_attempts > MAX_SEND_ATTEMPTS) {
  0036 c60000   [4]             LDA   send_attempts
  0039 a105     [2]             CMP   #5
  003b 2308     [3]             BLS   L45 ;abs = 0045
  115:                  ui++;
  003d 450000   [3]             LDHX  @ui
  0040 7c       [4]             INC   ,X
  116:                  send_attempts = 0;
  0041 4f       [1]             CLRA  
  0042 c70000   [4]             STA   send_attempts
  0045          L45:    
  117:              }
  118:  
  119:              (void) MLMESetChannelRequest(Channels[ui]);
  0045 ce0000   [4]             LDX   ui
  0048 8c       [1]             CLRH  
  0049 d60000   [4]             LDA   @Channels,X
  004c ac000000 [8]             CALL  MLMESetChannelRequest
  120:              
  121:              if (MLMEEnergyDetect() > NOISE_ENERGY) {
  0050 ac000000 [8]             CALL  MLMEEnergyDetect
  0054 a1be     [2]             CMP   #-66
  0056 2325     [3]             BLS   L7D ;abs = 007d
  122:                  ui++;
  0058 450000   [3]             LDHX  @ui
  005b 7c       [4]             INC   ,X
  123:                  send_attempts = 0;
  005c 4f       [1]             CLRA  
  005d c70000   [4]             STA   send_attempts
  124:                  uMac_TxPacket->Dest_Add = uMacbroad;
  0060 c60000   [4]             LDA   uMacbroad
  0063 320000   [5]             LDHX  uMac_TxPacket
  0066 e703     [3]             STA   3,X
  125:                  uMac_TxPacket->Packet_Type = 0;
  0068 6f01     [5]             CLR   1,X
  126:                  uMac_TxPacket->Pan_ID = 10;
  006a a60a     [2]             LDA   #10
  006c f7       [2]             STA   ,X
  127:                  uMac_TxPacket->Source_Add = MyID;
  006d a601     [2]             LDA   #1
  006f e702     [3]             STA   2,X
  128:                  (void) MCPSDataRequest(AppTxPacket);
  0071 320000   [5]             LDHX  AppTxPacket
  0074 ac000000 [8]             CALL  MCPSDataRequest
  129:                  uMac_Current_State = uMac_Init;
  0078 a601     [2]             LDA   #1
  130:              } else {
  007a cc0129   [4]             JMP   L129 ;abs = 0129
  007d          L7D:    
  131:                  send_attempts++;
  007d 450000   [3]             LDHX  @send_attempts
  0080 7c       [4]             INC   ,X
  0081          L81:    
  0081 8d       [7]             RTC   
  0082          L82:    
  132:              }
  133:          }
  134:          break;
  135:      case uMac_Init:
  136:          if (bTxDone == TRUE) {
  0082 c60000   [4]             LDA   bTxDone
  0085 4a       [1]             DECA  
  0086 2674     [3]             BNE   LFC ;abs = 00fc
  0088 ac000158 [8]             CALL  uMac_Engine:344
  137:              (void) MLMERXEnableRequest(AppRxPacket, 0);
  138:              (void) SetTimer(10000, 1);
  008c 452710   [3]             LDHX  #10000
  008f a601     [2]             LDA   #1
  0091 ac000000 [8]             CALL  SetTimer
  0095 cc0143   [4]             JMP   L143 ;abs = 0143
  0098          L98:    
  139:              uMac_Current_State = uMac_WaitRx;
  140:          }
  141:          break;
  142:      case uMac_WaitRx:
  143:          if (bTimerFlag1 == TRUE) {
  0098 c60000   [4]             LDA   bTimerFlag1
  009b 4b12     [4]             DBNZA LAF ;abs = 00af
  144:              bTimerFlag1 = FALSE;
  009d 4f       [1]             CLRA  
  009e c70000   [4]             STA   bTimerFlag1
  145:              (void) MLMERXDisableRequest();
  00a1 ac000000 [8]             CALL  MLMERXDisableRequest
  146:              uMac_Current_State = uMac_NoInit;
  00a5 4f       [1]             CLRA  
  00a6 c70000   [4]             STA   uMac_Current_State
  147:              uMac_On = TRUE;
  00a9 4c       [1]             INCA  
  00aa c70000   [4]             STA   uMac_On
  148:          } else if (bRxDone == TRUE) {
  00ad 2049     [3]             BRA   LF8 ;abs = 00f8
  00af          LAF:    
  00af c60000   [4]             LDA   bRxDone
  00b2 4b44     [4]             DBNZA LF8 ;abs = 00f8
  149:              bRxDone = FALSE;
  00b4 4f       [1]             CLRA  
  00b5 c70000   [4]             STA   bRxDone
  150:              if (AppRxPacket->rxStatus == rxSuccessStatus_c) {
  00b8 320000   [5]             LDHX  AppRxPacket
  00bb e601     [3]             LDA   1,X
  00bd a102     [2]             CMP   #2
  00bf 2633     [3]             BNE   LF4 ;abs = 00f4
  151:                  if (uMac_RxPacket->Pan_ID == 10) {
  00c1 320000   [5]             LDHX  uMac_RxPacket
  00c4 f6       [3]             LDA   ,X
  00c5 a10a     [2]             CMP   #10
  00c7 262b     [3]             BNE   LF4 ;abs = 00f4
  152:                      if (uMac_RxPacket->Dest_Add == MyID || uMac_RxPacket->Dest_Add == uMacbroad) {
  00c9 e603     [3]             LDA   3,X
  00cb 410107   [4]             CBEQA #1,LD5 ;abs = 00d5
  00ce c60000   [4]             LDA   uMacbroad
  00d1 e103     [3]             CMP   3,X
  00d3 261f     [3]             BNE   LF4 ;abs = 00f4
  00d5          LD5:    
  153:                          switch (uMac_RxPacket->Source_Add) {
  00d5 e602     [3]             LDA   2,X
  00d7 a102     [2]             CMP   #2
  00d9 2219     [3]             BHI   LF4 ;abs = 00f4
  00db 4d       [1]             TSTA  
  00dc 2709     [3]             BEQ   LE7 ;abs = 00e7
  00de 41010a   [4]             CBEQA #1,LEB ;abs = 00eb
  00e1 a102     [2]             CMP   #2
  00e3 260f     [3]             BNE   LF4 ;abs = 00f4
  00e5 2007     [3]             BRA   LEE ;abs = 00ee
  00e7          LE7:    
  154:                          case 0:
  155:                              Led_PrintValue(0x08);
  00e7 a608     [2]             LDA   #8
  156:                              break;
  00e9 2005     [3]             BRA   LF0 ;abs = 00f0
  00eb          LEB:    
  157:                          case 1:
  158:                              Led_PrintValue(0x06);
  00eb a606     [2]             LDA   #6
  159:                              break;
  00ed 65       [3]             SKIP2 LF0 ;abs = 00f0
  00ee          LEE:    
  160:                          case 2:
  161:                              Led_PrintValue(0x03);
  00ee a603     [2]             LDA   #3
  00f0          LF0:    
  00f0 ac000000 [8]             CALL  Led_PrintValue
  00f4          LF4:    
  00f4 ac000158 [8]             CALL  uMac_Engine:344
  00f8          LF8:    
  162:                              break;
  163:                          }
  164:                          
  165:                          if (uMac_RxPacket->Packet_Type != 0) {
  166:                              // Llamar callback
  167:                          }
  168:                      }
  169:                  }
  170:              }
  171:              (void) MLMERXEnableRequest(AppRxPacket, 0);
  172:          }
  173:  
  174:          if (bDoTx == TRUE) {
  00f8 c60000   [4]             LDA   bDoTx
  00fb 4a       [1]             DECA  
  00fc          LFC:    
  00fc 2659     [3]             BNE   L157 ;abs = 0157
  175:              (void) MLMERXDisableRequest();  // Deshabilitar la recepcion antes de transmitir (necesario por SMAC)
  00fe ac000000 [8]             CALL  MLMERXDisableRequest
  176:  
  177:              if (send_attempts > MAX_SEND_ATTEMPTS) {
  0102 c60000   [4]             LDA   send_attempts
  0105 a105     [2]             CMP   #5
  0107 230b     [3]             BLS   L114 ;abs = 0114
  178:                  bDoTx = FALSE;
  0109 4f       [1]             CLRA  
  010a c70000   [4]             STA   bDoTx
  179:                  send_attempts = 0;
  010d c70000   [4]             STA   send_attempts
  0110 ac000169 [8]             CALL  uMac_Engine:361
  0114          L114:   
  180:                  (void) MLMERXEnableRequest(AppRxPacket, 0);
  181:              }
  182:  
  183:              if (MLMEEnergyDetect() > NOISE_ENERGY) {    
  0114 ac000000 [8]             CALL  MLMEEnergyDetect
  0118 a1be     [2]             CMP   #-66
  011a 230f     [3]             BLS   L12B ;abs = 012b
  184:                  bDoTx = FALSE;
  011c 4f       [1]             CLRA  
  011d c70000   [4]             STA   bDoTx
  185:                  (void) MCPSDataRequest(AppTxPacket);
  0120 320000   [5]             LDHX  AppTxPacket
  0123 ac000000 [8]             CALL  MCPSDataRequest
  186:                  uMac_Current_State = uMac_Tx;
  0127 a604     [2]             LDA   #4
  0129          L129:   
  187:              } else {
  0129 2029     [3]             BRA   L154 ;abs = 0154
  012b          L12B:   
  188:                  send_attempts++;
  012b 450000   [3]             LDHX  @send_attempts
  012e 7c       [4]             INC   ,X
  189:                  (void) SetTimer(MyID*62, 1);
  012f ae3e     [2]             LDX   #62
  0131 8c       [1]             CLRH  
  0132 a601     [2]             LDA   #1
  0134 ac000000 [8]             CALL  SetTimer
  190:                  uMac_Current_State = uMac_Timer;
  0138 a605     [2]             LDA   #5
  013a 2018     [3]             BRA   L154 ;abs = 0154
  013c          L13C:   
  191:              }
  192:          }
  193:          
  194:          break;
  195:      case uMac_Timer:
  196:          if (bTimerFlag1 == TRUE) {
  013c c60000   [4]             LDA   bTimerFlag1
  013f 410110   [4]             CBEQA #1,L152 ;abs = 0152
  0142 8d       [7]             RTC   
  0143          L143:   
  0143 200d     [3]             BRA   L152 ;abs = 0152
  0145          L145:   
  197:              uMac_Current_State = uMac_WaitRx;
  198:          }
  199:          break;
  200:      case uMac_Tx:
  201:          if (bTxDone == TRUE) {
  0145 c60000   [4]             LDA   bTxDone
  0148 4b0d     [4]             DBNZA L157 ;abs = 0157
  202:              bTxDone = FALSE;
  014a 4f       [1]             CLRA  
  014b c70000   [4]             STA   bTxDone
  014e ac000169 [8]             CALL  uMac_Engine:361
  0152          L152:   
  203:              (void) MLMERXEnableRequest(AppRxPacket, 0);
  204:              uMac_Current_State = uMac_WaitRx;
  0152 a602     [2]             LDA   #2
  0154          L154:   
  0154 c70000   [4]             STA   uMac_Current_State
  0157          L157:   
  205:          }
  206:          break;
  207:      }
  208:  }
  0157 8d       [7]             RTC   
  0158          L158:   
  0158 320000   [5]             LDHX  AppRxPacket
  015b 89       [2]             PSHX  
  015c 8b       [2]             PSHH  
  015d 4f       [1]             CLRA  
  015e 87       [2]             PSHA  
  015f 87       [2]             PSHA  
  0160 87       [2]             PSHA  
  0161 87       [2]             PSHA  
  0162 ac000000 [8]             CALL  MLMERXEnableRequest
  0166 a706     [2]             AIS   #6
  0168 8d       [7]             RTC   
  0169          L169:   
  0169 320000   [5]             LDHX  AppRxPacket
  016c 89       [2]             PSHX  
  016d 8b       [2]             PSHH  
  016e 87       [2]             PSHA  
  016f 87       [2]             PSHA  
  0170 87       [2]             PSHA  
  0171 87       [2]             PSHA  
  0172 ac000000 [8]             CALL  MLMERXEnableRequest
  0176 a706     [2]             AIS   #6
  0178 8d       [7]             RTC   
  209:  
  210:  void
  211:  InitSmac (void)
  212:  {
  213:      AppTxPacket = (txPacket_t *) gau8TxDataBuffer;
  0000 450000   [3]             LDHX  @gau8TxDataBuffer
  0003 960000   [5]             STHX  AppTxPacket
  214:      AppTxPacket->u8DataLength = 10;
  0006 a60a     [2]             LDA   #10
  0008 f7       [2]             STA   ,X
  215:  
  216:      AppRxPacket = (rxPacket_t *) gau8RxDataBuffer; 
  0009 450000   [3]             LDHX  @gau8RxDataBuffer
  000c 960000   [5]             STHX  AppRxPacket
  217:      AppRxPacket->u8MaxDataLength = gMaxSmacSDULenght_c;
  000f a67b     [2]             LDA   #123
  0011 f7       [2]             STA   ,X
  218:      
  219:      
  220:      (void)MLMERadioInit();
  0012 ac000000 [8]             CALL  MLMERadioInit
  221:      (void)MLMESetClockRate(gClko16MHz_c);
  0016 4f       [1]             CLRA  
  0017 ac000000 [8]             CALL  MLMESetClockRate
  222:      (void)MCU_UseExternalClock();
  001b ac000000 [8]             CALL  MCU_UseExternalClock
  223:      
  224:      (void)MLMESetTmrPrescale(gTimeBase250kHz_c);
  001f a603     [2]             LDA   #3
  0021 ac000000 [8]             CALL  MLMESetTmrPrescale
  0025          L25:    
  225:      while (gErrorNoError_c != MLMESetChannelRequest(gDefaultChannelNumber_c));
  0025 a60f     [2]             LDA   #15
  0027 ac000000 [8]             CALL  MLMESetChannelRequest
  002b 4d       [1]             TSTA  
  002c 26f7     [3]             BNE   L25 ;abs = 0025
  226:      (void)MLMEPAOutputAdjust(gDefaultOutputPower_c);
  002e a608     [2]             LDA   #8
  0030 ac000000 [8]             CALL  MLMEPAOutputAdjust
  227:      (void)MLMEFEGainAdjust(gGainOffset_c);
  0034 a69b     [2]             LDA   #-101
  0036 ac000000 [8]             CALL  MLMEFEGainAdjust
  228:   }
  003a 8d       [7]             RTC   
  229:  
  230:  #ifdef MEMORY_MODEL_BANKED
  231:  #pragma CODE_SEG __NEAR_SEG NON_BANKED
  232:  #else
  233:  #pragma CODE_SEG DEFAULT
  234:  #endif /* MEMORY_MODEL_BANKED */
  235:  
  236:  void
  237:  MCPSDataIndication (rxPacket_t *gsRxPacket)
  238:  {  
  239:      bRxDone = TRUE;
  0000 a601     [2]             LDA   #1
  0002 c70000   [4]             STA   bRxDone
  240:  }
  0005 81       [6]             RTS   
  241:  
  242:  void
  243:  MCPSDataComfirm (txStatus_t TransmissionResult)
  244:  {  
  245:      bTxDone = TRUE;
  0000 a601     [2]             LDA   #1
  0002 c70000   [4]             STA   bTxDone
  246:  }
  0005 81       [6]             RTS   
  247:  
  248:  void
  249:  TimerCallBack1 (void)
  250:  {
  251:      bTimerFlag1 = TRUE;
  0000 a601     [2]             LDA   #1
  0002 c70000   [4]             STA   bTimerFlag1
  252:      (void) Tmr_Disable(gTmr3_c); 
  0005 4c       [1]             INCA  
  0006 cc0000   [4]             JMP   Tmr_Disable
  253:  }
  254:  
  255:  void
  256:  TimerCallBack2 (void)
  257:  {
  258:      bTimerFlag2 = TRUE;
  0000 a601     [2]             LDA   #1
  0002 c70000   [4]             STA   bTimerFlag2
  259:      (void) Tmr_Disable(gTmr3_c); 
  0005 4c       [1]             INCA  
  0006 cc0000   [4]             JMP   Tmr_Disable
  260:  }
  261:  
  262:  void
  263:  MLMEResetIndication (void)
  264:  {
  265:  
  266:  }
  0000 81       [6]             RTS   
  267:  
  268:  void
  269:  MLMEWakeComfirm (void)
  270:  {
  271:  
  272:  }
  0000 81       [6]             RTS   
  273:  
  274:  #pragma CODE_SEG DEFAULT
