ANSI-C/cC++ Compiler for HC08 V-5.0.39 Build 11346, Dec 13 2011

    1:  /*****************************************************************************
    2:  * Generic App demo main file.
    3:  * 
    4:  * Copyright (c) 2010, Freescale, Inc. All rights reserved.
    5:  *
    6:  * 
    7:  * No part of this document must be reproduced in any form - including copied,
    8:  * transcribed, printed or by any electronic means - without specific written
    9:  * permission from Freescale Semiconductor.
   10:  *
   11:  *  The Generic App demo may be used as template to develop proprietary solutions.
   12:  *  This applications shows all the basic initialization required to start the 
   13:  *  Radio, run SMAC, and the commonly used peripherals such as UART, LEDs, and 
   14:  *  KBIs.
   15:  *
   16:  *****************************************************************************/
   17:  
   18:  
   19:  #include <hidef.h>                  /*EnableInterrupts macro*/
   20:  #include "McuInit.h"                /*CPU and System Clock related functions*/
   21:  #include "derivative.h"             /*System Clock related declarations*/
   22:  #include "EmbeddedTypes.h"          /*Include special data types*/             
   23:  #include "Utilities_Interface.h"    /*Include Blocking Delays and data conversion functions*/
   24:  #include "PLM_config.h"
   25:  #include "SMAC_Interface.h"         /*Include all OTA functionality*/
   26:  #include "Radio_Interface.h"        /*Include all Radio functionality*/
   27:  #include "app_config.h"
   28:  #include "OTAP_Interface.h"
   29:  #include "uMAc_Interface.h"
   30:  
   31:  
   32:  /************************************************************************************
   33:  *************************************************************************************
   34:  * Private prototypes
   35:  *************************************************************************************
   36:  ************************************************************************************/
   37:  void InitProject(void);
   38:  //void InitSmac(void);
   39:  
   40:  /* Place it in NON_BANKED memory */
   41:  #ifdef MEMORY_MODEL_BANKED
   42:  #pragma CODE_SEG __NEAR_SEG NON_BANKED
   43:  #else
   44:  #pragma CODE_SEG DEFAULT
   45:  #endif /* MEMORY_MODEL_BANKED */
   46:  
   47:  
   48:  void MLMEScanComfirm(channels_t ClearestChann);
   49:  void MLMEResetIndication(void);
   50:  void MLMEWakeComfirm(void);
   51:  void UartRxCallback(uint8_t u8UartFlags);
   52:  void UartTxCallback(void);
   53:  #if (TRUE == gKeyboardSupported_d) || (TRUE == gTouchpadSupported_d) || (TRUE == gKbiSupported_d)
   54:    void KbiCallback(kbiPressed_t PressedKey);
   55:  #endif
   56:  #if (gTargetBoard_c == gMc1323xRcm_c) || (gTargetBoard_c == gMc1323xRem_c)
   57:    void KeyboardCallback (keyboardButton_t keyPressed);
   58:  #endif
   59:  #if gTargetBoard_c == gMc1323xRcm_c
   60:    void TouchpadCallback(touchpadEvent_t * event);
   61:  #endif
   62:  void LCDCallback(lcdErrors_t lcdError);
   63:  
   64:  void MCPSDataComfirm(txStatus_t TransmissionResult);
   65:  void MCPSDataIndication(rxPacket_t *gsRxPacket);
   66:  
   67:  
   68:  /* Place your callbacks prototypes declarations here */
   69:  
   70:  #pragma CODE_SEG DEFAULT
   71:  
   72:  
   73:  
   74:  /************************************************************************************
   75:  *************************************************************************************
   76:  * Public memory declarations
   77:  *************************************************************************************
   78:  ************************************************************************************/
   79:  
   80:  bool_t  KeyPressed = FALSE;
   81:  
   82:  bool_t bUartDataInFlag;
   83:  bool_t bUartTxDone;  
   84:  uint8_t UartData;
   85:  uartPortNumber_t portNumber;  
   86:  uartConfigSet_t uartSettings;
   87:  
   88:  kbiConfig_t gKbiConfiguration;
   89:  
   90:  uMac_nodeType type;
   91:  uint8_t dest;
   92:  
   93:  
   94:  /************************************************************************************
   95:  *************************************************************************************
   96:  * Main application functions
   97:  *************************************************************************************
   98:  ************************************************************************************/
   99:  
  100:  void main(void) 
  101:  {
  102:  
  103:    MCUInit();
  0000 ac000000 [8]             CALL  MCUInit
  104:    EnableInterrupts; /* Enable interrupts */  
  0004 9a       [1]             CLI   
  105:    
  106:    InitProject();
  0005 ac000000 [8]             CALL  InitProject
  107:    //InitSmac();
  108:    (void) Init_uMac();
  0009 ac000000 [8]             CALL  Init_uMac
  109:    //(void) uMac_Txf();
  110:    (void)Uart_BlockingStringTx("\f\r\n\r\n\t Generic Demonstration Application", gDefaultUartPort_c);
  000d 450000   [3]             LDHX  @"\014\015\012\015\012\011 Generic Demonstration Application"
  0010 4f       [1]             CLRA  
  0011 ac000000 [8]             CALL  Uart_BlockingStringTx
  0015          L15:    
  111:   
  112:    for(;;) 
  113:    {
  114:      Otap_OpcMain();
  0015 ac000000 [8]             CALL  Otap_OpcMain
  115:       
  116:      /* Put your own code here */
  117:      //if (KeyPressed == TRUE) {
  118:      	
  119:      	(void) uMac_Engine();
  0019 ac000000 [8]             CALL  uMac_Engine
  120:      //}
  121:      __RESET_WATCHDOG();
  001d c70000   [4]             STA   _SRS
  0020 20f3     [3]             BRA   L15 ;abs = 0015
  122:      
  123:    } 
  124:   
  125:  }
  126:  
  127:  
  128:  /************************************************************************************
  129:  *
  130:  * InitProject
  131:  *
  132:  ************************************************************************************/
  133:  void InitProject(void)
  134:  {
  135:    /* GPIO Initialization */ 
  136:    Gpio_Init();
  0000 ac000000 [8]             CALL  Gpio_Init
  137:      
  138:    /* UART Initialization */
  139:  #if TRUE == gUartSupported_d   
  140:    portNumber = gDefaultUartPort_c; 
  0004 4f       [1]             CLRA  
  0005 c70000   [4]             STA   portNumber
  141:    uartSettings.baudRate = gUartDefaultBaud_c;
  0008 ae0d     [2]             LDX   #13
  000a 8c       [1]             CLRH  
  000b 960000   [5]             STHX  uartSettings
  142:    uartSettings.dataBits = g8DataBits_c;
  000e a608     [2]             LDA   #8
  0010 c70002   [4]             STA   uartSettings:2
  143:    uartSettings.parity = gUartParityNone_c;
  0013 4f       [1]             CLRA  
  0014 c70003   [4]             STA   uartSettings:3
  144:    (void)Uart_Init();
  0017 ac000000 [8]             CALL  Uart_Init
  145:    (void)Uart_Configure(portNumber, &uartSettings);
  001b c60000   [4]             LDA   portNumber
  001e 450000   [3]             LDHX  @uartSettings
  0021 ac000000 [8]             CALL  Uart_Configure
  146:    (void)Uart_RegisterRxCallBack(UartRxCallback, gUartRxCbCodeNewByte_c, portNumber);
  0025 450000   [3]             LDHX  @UartRxCallback
  0028 89       [2]             PSHX  
  0029 8b       [2]             PSHH  
  002a ae04     [2]             LDX   #4
  002c c60000   [4]             LDA   portNumber
  002f ac000000 [8]             CALL  Uart_RegisterRxCallBack
  0033 a702     [2]             AIS   #2
  147:    (void)Uart_RegisterTxCallBack(UartTxCallback, portNumber);
  0035 450000   [3]             LDHX  @UartTxCallback
  0038 c60000   [4]             LDA   portNumber
  003b ac000000 [8]             CALL  Uart_RegisterTxCallBack
  148:    
  149:    
  150:  #endif
  151:  
  152:    
  153:   /* Timer Initialization */    
  154:    (void)Tmr_Init(); 
  003f cd0000   [6]             JSR   Tmr_Init
  155:    
  156:   /* KBI Initialization */
  157:    #if gTargetBoard_c == gMc1323xRcm_c || gTargetBoard_c == gMc1323xRem_c  
  158:    #if (gKeyboardSupported_d || gTouchpadSupported_d)    
  159:      gKbiConfiguration.Control.bit.TriggerByLevel = 0;
  160:      gKbiConfiguration.Control.bit.Interrupt = 1;
  161:      gKbiConfiguration.Control.bit.Acknowledge = 1;
  162:      gKbiConfiguration.InterruptPin.Port = gSwitchColmnMask_c|gTouchpadAttnPinMask_c;
  163:      gKbiConfiguration.EdgeSelect.Port = gSwitchColmnMask_c;
  164:      (void)Kbi_Init((kbiCallback_t)KbiCallback, &gKbiConfiguration, gSwitchKbiModule_c);
  165:      (void)Keyboard_InitKeyboard(KeyboardCallback);
  166:    #endif
  167:    #else
  168:      gKbiConfiguration.Control.bit.TriggerByLevel = 0;
  0042 450000   [3]             LDHX  @gKbiConfiguration
  0045 f6       [3]             LDA   ,X
  0046 a4fe     [2]             AND   #-2
  0048 f7       [2]             STA   ,X
  169:      gKbiConfiguration.Control.bit.Interrupt = 1;
  0049 aa02     [2]             ORA   #2
  004b f7       [2]             STA   ,X
  170:      gKbiConfiguration.Control.bit.Acknowledge = 1;
  004c aa04     [2]             ORA   #4
  004e f7       [2]             STA   ,X
  171:      gKbiConfiguration.InterruptPin.Port = gSwitchMask;
  004f a60f     [2]             LDA   #15
  0051 e701     [3]             STA   1,X
  172:      gKbiConfiguration.EdgeSelect.Port = 0;
  0053 4f       [1]             CLRA  
  0054 e702     [3]             STA   2,X
  173:      (void)Kbi_Init((kbiCallback_t)KbiCallback, &gKbiConfiguration, gSwitchKbiModule_c);
  0056 450000   [3]             LDHX  @KbiCallback
  0059 89       [2]             PSHX  
  005a 8b       [2]             PSHH  
  005b 450000   [3]             LDHX  @gKbiConfiguration
  005e 4c       [1]             INCA  
  005f ac000000 [8]             CALL  Kbi_Init
  0063 a702     [2]             AIS   #2
  174:    #endif 
  175:  
  176:    /* SPI Initialization */ 
  177:    SPI1_Init(gSpiBaudDivisor_2_c); 
  0065 4f       [1]             CLRA  
  0066 cd0000   [6]             JSR   SPI1_Init
  178:  
  179:    #if gTargetBoard_c == gMc1321xSrb_c || gTargetBoard_c == gMc1321xNcb_c || gTargetBoard_c == gMc1320xS08qe128Evb_c 
  180:      IRQ_Init(NULL);
  0069 5f       [1]             CLRX  
  006a 8c       [1]             CLRH  
  006b ac000000 [8]             CALL  IRQ_Init
  181:    #endif
  182:    
  183:    /* Touchpad Initialization */ 
  184:    #if gTargetBoard_c == gMc1323xRcm_c
  185:    (void)IIC_Init(mIic100KhzBaudInitParameters_c);
  186:    (void)Touchpad_DriverInit(TouchpadCallback, gGpioPortB_c, gGpioPin6Mask_c);
  187:    #endif
  188:    
  189:    /*LCD configuration*/
  190:    (void)Lcd_Init(LCDCallback);
  006f 450000   [3]             LDHX  @LCDCallback
  0072 ac000000 [8]             CALL  Lcd_Init
  191:    (void)Lcd_Config(TRUE,TRUE,FALSE);
  0076 ae01     [2]             LDX   #1
  0078 89       [2]             PSHX  
  0079 4f       [1]             CLRA  
  007a ac000000 [8]             CALL  Lcd_Config
  007e 8a       [3]             PULH  
  192:  
  193:  
  194:     /* OTAP Initialization */
  195:    Otap_OpcInit();
  007f ac000000 [8]             CALL  Otap_OpcInit
  196:      
  197:    /* Place your app initialization here */
  198:  
  199:  
  200:  }
  0083 8d       [7]             RTC   
  201:  
  202:  /************************************************************************************
  203:  *
  204:  * InitSmac
  205:  *
  206:  ************************************************************************************/
  207:  
  208:  /* Place it in NON_BANKED memory */
  209:  #ifdef MEMORY_MODEL_BANKED
  210:  #pragma CODE_SEG __NEAR_SEG NON_BANKED
  211:  #else
  212:  #pragma CODE_SEG DEFAULT
  213:  #endif /* MEMORY_MODEL_BANKED */
  214:  
  215:  /************************************************************************************
  216:  * User's Callbacks
  217:  ************************************************************************************/
  218:  
  219:  /* Place your callbacks here */
  220:  
  221:  
  222:  
  223:  
  224:  
  225:  
  226:  
  227:  /************************************************************************************
  228:  *
  229:  * TouchpadCallback
  230:  *
  231:  ************************************************************************************/
  232:  #if gTargetBoard_c == gMc1323xRcm_c
  233:  void TouchpadCallback(touchpadEvent_t * event)
  234:  {
  235:    switch(event->EventType)
  236:    {
  237:      case gTouchpadBusError_c:
  238:           /* Place your implementation here */ 
  239:      break;
  240:      case gTouchpadGpioEvent_c:
  241:           /* Place your implementation here */
  242:      break;
  243:      case gTouchpadFingerPositionEvent_c:
  244:           /* Place your implementation here */
  245:      break;
  246:      case gTouchpadPinchGestureEvent_c:
  247:           /* Place your implementation here */ 
  248:      break;
  249:      case gTouchpadFlickGestureEvent_c:  
  250:           /* Place your implementation here */
  251:      break;
  252:      case gTouchpadEarlyTapGestureEvent_c:
  253:           /* Place your implementation here */
  254:      break;
  255:      case gTouchpadDoubleTapGestureEvent_c:
  256:           /* Place your implementation here */
  257:      break;
  258:      case gTouchpadTapAndHoldGestureEvent_c:
  259:           /* Place your implementation here */
  260:      break;
  261:      case gTouchpadSingleTapGestureEvent_c:
  262:           /* Place your implementation here */
  263:      break;
  264:      case gTouchpadDevStatusEvent_c:
  265:           /* Place your implementation here */
  266:      break;
  267:      case gTouchpadFlashEvent_c:
  268:           /* Place your implementation here */
  269:      break;
  270:      default:
  271:           /* Place your implementation here */ 
  272:      break;
  273:    }
  274:  }
  275:  #endif
  276:  
  277:  
  278:  /************************************************************************************
  279:  * UartTxCallback
  280:  * 
  281:  *
  282:  *
  283:  ************************************************************************************/
  284:  void UartTxCallback(void)
  285:  {
  286:      bUartTxDone = TRUE;  
  0000 a601     [2]             LDA   #1
  0002 c70000   [4]             STA   bUartTxDone
  287:  }
  0005 81       [6]             RTS   
  288:  
  289:  /************************************************************************************
  290:  * UartRxCallback
  291:  * 
  292:  *
  293:  *
  294:  ************************************************************************************/
  295:  void UartRxCallback(uint8_t u8UartFlags)
  296:  {
  0000 8b       [2]             PSHH  
  297:    uint8_t iByteNumber;
  298:    (void)u8UartFlags;
  299:    
  300:    iByteNumber = 1;
  0001 a601     [2]             LDA   #1
  0003 95       [2]             TSX   
  0004 f7       [2]             STA   ,X
  301:    
  302:    (void)Uart_GetBytesFromRxBuffer(&UartData, &iByteNumber, portNumber);
  0005 450000   [3]             LDHX  @UartData
  0008 89       [2]             PSHX  
  0009 8b       [2]             PSHH  
  000a 95       [2]             TSX   
  000b af02     [2]             AIX   #2
  000d c60000   [4]             LDA   portNumber
  0010 ac000000 [8]             CALL  Uart_GetBytesFromRxBuffer
  0014 a702     [2]             AIS   #2
  303:    bUartDataInFlag = TRUE;
  0016 a601     [2]             LDA   #1
  0018 c70000   [4]             STA   bUartDataInFlag
  304:   
  305:  }
  001b 8a       [3]             PULH  
  001c 81       [6]             RTS   
  306:  
  307:  #if (TRUE == gKeyboardSupported_d) || (TRUE == gTouchpadSupported_d) || (TRUE == gKbiSupported_d)
  308:  /************************************************************************************
  309:  * KbiCallback
  310:  * 
  311:  *  This function should be set as the Kbi callback function in Kbi_Init
  312:  *
  313:  ************************************************************************************/
  314:  #if gTargetBoard_c == gMc1323xRcm_c || gTargetBoard_c == gMc1323xRem_c
  315:  void KbiCallback(kbiPressed_t PressedKey)
  316:  {  
  317:    (void)PressedKey;
  318:    if(gKbiPressedKey0_c == PressedKey || gKbiPressedKey1_c == PressedKey || gKbiPressedKey2_c == PressedKey || gKbiPressedKey3_c == PressedKey \
  319:       || gKbiPressedKey4_c == PressedKey || gKbiPressedKey5_c == PressedKey)
  320:    {
  321:       Keyboard_KbiEvent(PressedKey);
  322:    }
  323:    else if (gKbiPressedKey6_c == PressedKey)
  324:    {
  325:       #if gTargetBoard_c == gMc1323xRcm_c
  326:       Touchpad_EventHandler();
  327:       #endif
  328:    }
  329:     
  330:  } 
  331:  #else
  332:  void KbiCallback(kbiPressed_t PressedKey)
  333:  {  
  334:    KeyPressed = TRUE;
  0000 ae01     [2]             LDX   #1
  0002 cf0000   [4]             STX   KeyPressed
  335:    switch(PressedKey)
  0005 a108     [2]             CMP   #8
  0007 2221     [3]             BHI   L2A ;abs = 002a
  0009 41010c   [4]             CBEQA #1,L18 ;abs = 0018
  000c 41020e   [4]             CBEQA #2,L1D ;abs = 001d
  000f 41040f   [4]             CBEQA #4,L21 ;abs = 0021
  0012 a108     [2]             CMP   #8
  0014 2614     [3]             BNE   L2A ;abs = 002a
  0016 200d     [3]             BRA   L25 ;abs = 0025
  0018          L18:    
  336:    {
  337:      case gKbiPressedKey0_c:
  338:        /* Place your implementation here */
  339:      	type = uMac_Router;
  0018 4f       [1]             CLRA  
  0019 c70000   [4]             STA   type
  340:      break;
  001c 81       [6]             RTS   
  001d          L1D:    
  341:      case gKbiPressedKey1_c:
  342:        /* Place your implementation here */
  343:      	type = uMac_Client;
  001d cf0000   [4]             STX   type
  344:      break;
  0020 81       [6]             RTS   
  0021          L21:    
  345:      case gKbiPressedKey2_c:
  346:        /* Place your implementation here */
  347:      	dest = 1;
  0021 cf0000   [4]             STX   dest
  348:      break;
  0024 81       [6]             RTS   
  0025          L25:    
  349:      case gKbiPressedKey3_c:
  350:        /* Place your implementation here */
  351:      	dest = 2;
  0025 a602     [2]             LDA   #2
  0027 c70000   [4]             STA   dest
  002a          L2A:    
  352:      break;
  353:      default:
  354:      break;
  355:    }
  356:     
  357:  }
  002a 81       [6]             RTS   
  358:  
  359:  
  360:  #endif 
  361:        
  362:  #endif
  363:  
  364:  /************************************************************************************
  365:  * KeyboardCallback
  366:  * 
  367:  *
  368:  *
  369:  ************************************************************************************/
  370:  #if (gTargetBoard_c == gMc1323xRcm_c) || (gTargetBoard_c == gMc1323xRem_c)
  371:  
  372:  void KeyboardCallback(keyboardButton_t keyPressed)
  373:  {
  374:     KeyPressed = TRUE;
  375:     switch(keyPressed)
  376:     {
  377:      case gSw1_c:
  378:        /* Place your implementation here */ 
  379:      break;
  380:      
  381:      case gSw2_c:
  382:        /* Place your implementation here */
  383:      break;
  384:      
  385:      case gSw3_c:
  386:        /* Place your implementation here */ 
  387:      break;
  388:      
  389:      case gSw4_c:
  390:        /* Place your implementation here */ 
  391:      break;
  392:      
  393:      case gSw5_c:
  394:        /* Place your implementation here */ 
  395:      break;
  396:      
  397:      case gSw6_c:
  398:        /* Place your implementation here */ 
  399:      break;
  400:      
  401:      case gSw7_c:
  402:        /* Place your implementation here */ 
  403:      break;
  404:      
  405:      case gSw8_c:
  406:        /* Place your implementation here */ 
  407:      break;
  408:  
  409:  #if gTargetBoard_c == gMc1323xRcm_c     
  410:      case gSw9_c:
  411:        /* Place your implementation here */ 
  412:      break;
  413:      
  414:      case gSw10_c:
  415:        /* Place your implementation here */ 
  416:      break;
  417:      
  418:      case gSw11_c:
  419:        /* Place your implementation here */
  420:      break;
  421:      
  422:      case gSw12_c:
  423:        /* Place your implementation here */ 
  424:      break;
  425:      
  426:      case gSw13_c:
  427:        /* Place your implementation here */ 
  428:      break;
  429:      
  430:      case gSw14_c:
  431:        /* Place your implementation here */
  432:      break;
  433:      
  434:      case gSw15_c:
  435:        /* Place your implementation here */
  436:      break;
  437:      
  438:      case gSw16_c:
  439:        /* Place your implementation here */ 
  440:      break;
  441:      
  442:      case gSw17_c:
  443:        /* Place your implementation here */ 
  444:      break;
  445:      
  446:      case gSw18_c:
  447:        /* Place your implementation here */
  448:      break;
  449:      
  450:      case gSw19_c:
  451:        /* Place your implementation here */
  452:      break;
  453:      
  454:      case gSw20_c:
  455:        /* Place your implementation here */ 
  456:      break;
  457:      
  458:      case gSw21_c:
  459:        /* Place your implementation here */ 
  460:      break;
  461:      
  462:      case gSw22_c:
  463:        /* Place your implementation here */ 
  464:      break;
  465:      
  466:      case gSw23_c:
  467:        /* Place your implementation here */
  468:      break;
  469:      
  470:      case gSw24_c:
  471:        /* Place your implementation here */ 
  472:      break;
  473:      
  474:      case gSw25_c:
  475:        /* Place your implementation here */ 
  476:      break;
  477:      
  478:      case gSw26_c:
  479:        /* Place your implementation here */ 
  480:      break;
  481:      
  482:      case gSw27_c:
  483:        /* Place your implementation here */ 
  484:      break;
  485:      
  486:      case gSw28_c:
  487:        /* Place your implementation here */ 
  488:      break;
  489:      
  490:      case gSw29_c:
  491:        /* Place your implementation here */ 
  492:      break;
  493:      
  494:      case gSk1_c:
  495:        /* Place your implementation here */ 
  496:      break;
  497:      
  498:      case gSk2_c:
  499:        /* Place your implementation here */ 
  500:      break;
  501:      
  502:      case gSk3_c:
  503:        /* Place your implementation here */ 
  504:      break;
  505:      
  506:      case gSk4_c:
  507:        /* Place your implementation here */ 
  508:      break;
  509:      
  510:  #endif    
  511:      
  512:      default:
  513:        /* Place your implementation here */ 
  514:      break;
  515:     }
  516:         
  517:  }
  518:  #endif
  519:  
  520:  /************************************************************************************
  521:  * LCDCallback
  522:  * 
  523:  *
  524:  *
  525:  ************************************************************************************/
  526:  void LCDCallback(lcdErrors_t lcdError)
  527:  {
  528:    (void)lcdError;
  529:  }
  0000 81       [6]             RTS   
  530:  
  531:  
  532:  /************************************************************************************
  533:  * SMAC Callbacks
  534:  ************************************************************************************/
  535:  
  536:  /************************************************************************************
  537:  * MCPSDataComfirm
  538:  * 
  539:  *
  540:  *
  541:  ************************************************************************************/
  542:   
  543:  
  544:  /************************************************************************************
  545:  * MCPSDataIndication
  546:  * 
  547:  *
  548:  *
  549:  ************************************************************************************/
  550:  
  551:  
  552:  
  553:  /************************************************************************************
  554:  * MLMEScanComfirm
  555:  * 
  556:  *
  557:  *
  558:  ************************************************************************************/
  559:  
  560:  
  561:  /************************************************************************************
  562:  * MLMEResetIndication
  563:  * 
  564:  *
  565:  *
  566:  ************************************************************************************/
  567:  
  568:  
  569:  /************************************************************************************
  570:  * MLMEWakeComfirm
  571:  * 
  572:  *
  573:  *
  574:  ************************************************************************************/
  575:  
  576:  
  577:  
  578:  
  579:  #pragma CODE_SEG DEFAULT
  580:  
  581:  
  582:  
  583:  
