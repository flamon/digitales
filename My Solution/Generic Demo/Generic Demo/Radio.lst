ANSI-C/cC++ Compiler for HC08 V-5.0.39 Build 11346, Dec 13 2011

    1:  /*****************************************************************************
    2:  * Radio driver implementation.
    3:  * Radio's driver code
    4:  * 
    5:  * Copyright (c) 2009, Freescale, Inc. All rights reserved.
    6:  *
    7:  * 
    8:  * No part of this document must be reproduced in any form - including copied,
    9:  * transcribed, printed or by any electronic means - without specific written
   10:  * permission from Freescale Semiconductor.
   11:  *
   12:  *****************************************************************************/
   13:  
   14:  
   15:  #include "Radio.h"
   16:  
   17:  /************************************************************************************
   18:  *************************************************************************************
   19:  * Private memory declarations
   20:  *************************************************************************************
   21:  ************************************************************************************/
   22:  
   23:  uint16_t              gu16RadioIrqStatus;
   24:  radioDriverStates_t   mRadioDriverState;
   25:  radioCallback_t       mpfRadioProcessCallback;
   26:  radioCallback_t       mpfRadioEventCallback;
   27:  uint8_t               mau8RadioDataBuffer[gRadioMaxDataLenght_c];
   28:  uint8_t*              mpu8RadioRxPointer;
   29:  uint8_t               mau8RadioDataLength;
   30:  uint16_t              mu16WrittingRegisterValue;
   31:  uint16_t*             mpu16ReadingRegisterPointer;
   32:  radioProcessStates_t  mRadioProcessState;
   33:  
   34:  
   35:  /************************************************************************************
   36:  *************************************************************************************
   37:  * Interface functions
   38:  *************************************************************************************
   39:  ************************************************************************************/
   40:  
   41:  /* Place it in NON_BANKED memory */
   42:  #ifdef MEMORY_MODEL_BANKED
   43:  #pragma CODE_SEG __NEAR_SEG NON_BANKED
   44:  #else
   45:  #pragma CODE_SEG DEFAULT
   46:  #endif /* MEMORY_MODEL_BANKED */
   47:  
   48:  /************************************************************************************
   49:  * Initialize the Radio Driver and sets the Radio's control signals to an initial 
   50:  * state.
   51:  *
   52:  ************************************************************************************/
   53:  radioError_t Radio_DriverInit
   54:  (
   55:    radioCallback_t   radioEventCallback //IN, Pointer to the Event callback
   56:  )
   57:  {
   58:    if(NULL == radioEventCallback){
  0000 650000   [3]             CPHX  #0
  0003 2603     [3]             BNE   L8 ;abs = 0008
   59:      return gRadioErrInvalidParameter_c;
  0005 a601     [2]             LDA   #1
  0007 81       [6]             RTS   
  0008          L8:     
   60:    }
   61:    
   62:    IRQ_Init((irqCallback_t)(RadioIRQServiceRoutine));
  0008 89       [2]             PSHX  
  0009 8b       [2]             PSHH  
  000a 450000   [3]             LDHX  @RadioIRQServiceRoutine
  000d ac000000 [8]             CALL  IRQ_Init
   63:    gu16RadioIrqStatus      = gRadioIrqNoFlags_c;
  0011 5f       [1]             CLRX  
  0012 8c       [1]             CLRH  
  0013 960000   [5]             STHX  gu16RadioIrqStatus
   64:    mRadioDriverState       = mRadioStateIdle_c;
  0016 cf0000   [4]             STX   mRadioDriverState
   65:    mpfRadioEventCallback   = radioEventCallback;
  0019 8a       [3]             PULH  
  001a 88       [3]             PULX  
  001b 960000   [5]             STHX  mpfRadioEventCallback
   66:    mRadioProcessState     = mRadioProcessIdle_c;
  001e 4f       [1]             CLRA  
  001f c70000   [4]             STA   mRadioProcessState
   67:    RadioInitControlSignals();
  0022 cd0000   [6]             JSR   RadioInitControlSignals
   68:    
   69:    return gRadioErrNoError_c;
  0025 4f       [1]             CLRA  
   70:  }
  0026 81       [6]             RTS   
   71:  
   72:  /************************************************************************************
   73:  * Function to Write on the Radio's SPI registers
   74:  *
   75:  ************************************************************************************/
   76:  radioError_t Radio_WriteRegister
   77:  (
   78:    uint8_t           regToWrite,     //IN, Addres of the Radio register to be writted  
   79:    uint16_t          u16RegValue,    //IN, value to write on the register
   80:    radioCallback_t   writeCallback   /*IN, Callback function to be called at the end  
   81:                                            of the register write*/
   82:  )
   83:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
   84:  
   85:    if(mRadioAreRadioOrSPIBusy){
  0002 c60000   [4]             LDA   mRadioDriverState
  0005 260b     [3]             BNE   L12 ;abs = 0012
  0007 a601     [2]             LDA   #1
  0009 450000   [3]             LDHX  @RadioProcess
  000c cd0000   [6]             JSR   SPI1_AssertPeripheralSsPin
  000f 4d       [1]             TSTA  
  0010 2704     [3]             BEQ   L16 ;abs = 0016
  0012          L12:    
   86:      return gRadioErrRadioBussy_c;    
  0012 a602     [2]             LDA   #2
  0014 2020     [3]             BRA   L36 ;abs = 0036
  0016          L16:    
   87:    }
   88:    
   89:    IRQ_DisableIrq();
  0016 1300     [5]             BCLR  1,_IRQSC
   90:    mu16WrittingRegisterValue  = u16RegValue;
  0018 9efe05   [5]             LDHX  5,SP
  001b 960000   [5]             STHX  mu16WrittingRegisterValue
   91:    mpfRadioProcessCallback    = writeCallback;
  001e 9efe01   [5]             LDHX  1,SP
  0021 960000   [5]             STHX  mpfRadioProcessCallback
   92:    mRadioDriverState = mRadioStateWrittingRegister_c;
  0024 a602     [2]             LDA   #2
  0026 c70000   [4]             STA   mRadioDriverState
   93:    mRadioProcessState = mRadioProcessSendingAddres_c;
  0029 4a       [1]             DECA  
  002a c70000   [4]             STA   mRadioProcessState
   94:    (void)SPI1_WriteByte(regToWrite & 0x7F);
  002d 95       [2]             TSX   
  002e e606     [3]             LDA   6,X
  0030 a47f     [2]             AND   #127
  0032 cd0000   [6]             JSR   SPI1_WriteByte
   95:  
   96:    return gRadioErrNoError_c;
  0035 4f       [1]             CLRA  
  0036          L36:    
   97:  }
  0036 a702     [2]             AIS   #2
  0038 81       [6]             RTS   
   98:   
   99:  /************************************************************************************
  100:  * Function to Write on the Radio's SPI registers
  101:  *
  102:  ************************************************************************************/
  103:  radioError_t Radio_WriteRegisterBlocking
  104:  (
  105:    uint8_t           regToWrite,    //IN, Addres of the Radio register to be writted  
  106:    uint16_t          u16RegValue    //IN, value to write on the register
  107:  )
  108:  {
  0000 87       [2]             PSHA  
  0001 89       [2]             PSHX  
  0002 8b       [2]             PSHH  
  109:    if(mRadioAreRadioOrSPIBusy){
  0003 c60000   [4]             LDA   mRadioDriverState
  0006 260b     [3]             BNE   L13 ;abs = 0013
  0008 a601     [2]             LDA   #1
  000a 450000   [3]             LDHX  @RadioProcess
  000d cd0000   [6]             JSR   SPI1_AssertPeripheralSsPin
  0010 4d       [1]             TSTA  
  0011 2704     [3]             BEQ   L17 ;abs = 0017
  0013          L13:    
  110:      return gRadioErrRadioBussy_c;    
  0013 a602     [2]             LDA   #2
  0015 201e     [3]             BRA   L35 ;abs = 0035
  0017          L17:    
  111:    }
  112:  
  113:    IRQ_DisableIrq();
  0017 1300     [5]             BCLR  1,_IRQSC
  114:    mRadioDriverState = mRadioStateWrittingRegister_c;
  0019 a602     [2]             LDA   #2
  001b c70000   [4]             STA   mRadioDriverState
  115:    SPI1_WriteByteBlocking(regToWrite & 0x7F);
  001e 95       [2]             TSX   
  001f e602     [3]             LDA   2,X
  0021 a47f     [2]             AND   #127
  0023 cd0000   [6]             JSR   SPI1_WriteByteBlocking
  116:    (void)SPI1_WriteStringBlocking((uint8_t*)&u16RegValue, 2);
  0026 95       [2]             TSX   
  0027 a602     [2]             LDA   #2
  0029 cd0000   [6]             JSR   SPI1_WriteStringBlocking
  117:    (void)SPI1_DeassertPeripheralSsPin();
  002c cd0000   [6]             JSR   SPI1_DeassertPeripheralSsPin
  118:    mRadioDriverState = mRadioStateIdle_c;
  002f 4f       [1]             CLRA  
  0030 c70000   [4]             STA   mRadioDriverState
  119:    
  120:    IRQ_EnableIrq();
  0033 1200     [5]             BSET  1,_IRQSC
  0035          L35:    
  121:  }
  0035 a703     [2]             AIS   #3
  0037 81       [6]             RTS   
  122:  
  123:  /************************************************************************************
  124:  * Function to Read from the Radio's SPI registers
  125:  *
  126:  ************************************************************************************/
  127:  radioError_t Radio_ReadRegister
  128:  (
  129:    uint8_t           regToRead,      //IN, Addres of the Radio register to be read  
  130:    uint16_t*         pu16RegValue,   //OUT, pointer to store the register value
  131:    radioCallback_t   readCallback    /*IN, Callback function to be called at the end  
  132:                                            of the register read*/
  133:  )
  134:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  135:    if(mRadioAreRadioOrSPIBusy){
  0002 c60000   [4]             LDA   mRadioDriverState
  0005 260b     [3]             BNE   L12 ;abs = 0012
  0007 a601     [2]             LDA   #1
  0009 450000   [3]             LDHX  @RadioProcess
  000c cd0000   [6]             JSR   SPI1_AssertPeripheralSsPin
  000f 4d       [1]             TSTA  
  0010 2704     [3]             BEQ   L16 ;abs = 0016
  0012          L12:    
  136:      return gRadioErrRadioBussy_c;    
  0012 a602     [2]             LDA   #2
  0014 2020     [3]             BRA   L36 ;abs = 0036
  0016          L16:    
  137:    }
  138:  
  139:    IRQ_DisableIrq();
  0016 1300     [5]             BCLR  1,_IRQSC
  140:    mpu16ReadingRegisterPointer  = pu16RegValue;
  0018 9efe05   [5]             LDHX  5,SP
  001b 960000   [5]             STHX  mpu16ReadingRegisterPointer
  141:    mpfRadioProcessCallback      = readCallback;
  001e 9efe01   [5]             LDHX  1,SP
  0021 960000   [5]             STHX  mpfRadioProcessCallback
  142:    mRadioDriverState = mRadioStateReadingRegister_c;
  0024 a603     [2]             LDA   #3
  0026 c70000   [4]             STA   mRadioDriverState
  143:    mRadioProcessState = mRadioProcessSendingAddres_c;
  0029 44       [1]             LSRA  
  002a c70000   [4]             STA   mRadioProcessState
  144:    (void)SPI1_WriteByte(regToRead | 0x80);
  002d 95       [2]             TSX   
  002e e606     [3]             LDA   6,X
  0030 aa80     [2]             ORA   #-128
  0032 cd0000   [6]             JSR   SPI1_WriteByte
  145:  
  146:    return gRadioErrNoError_c;
  0035 4f       [1]             CLRA  
  0036          L36:    
  147:  }
  0036 a702     [2]             AIS   #2
  0038 81       [6]             RTS   
  148:  
  149:  /************************************************************************************
  150:  * Function to Read from the Radio's SPI registers
  151:  *
  152:  ************************************************************************************/
  153:  radioError_t Radio_ReadRegisterBlocking
  154:  (
  155:    uint8_t           regToRead,     //IN, Addres of the Radio register to be read  
  156:    uint16_t*         pu16RegValue   //OUT, pointer to store the register value
  157:  )
  158:  {
  0000 87       [2]             PSHA  
  0001 89       [2]             PSHX  
  0002 8b       [2]             PSHH  
  159:    if(mRadioAreRadioOrSPIBusy){
  0003 c60000   [4]             LDA   mRadioDriverState
  0006 260b     [3]             BNE   L13 ;abs = 0013
  0008 a601     [2]             LDA   #1
  000a 450000   [3]             LDHX  @RadioProcess
  000d cd0000   [6]             JSR   SPI1_AssertPeripheralSsPin
  0010 4d       [1]             TSTA  
  0011 2704     [3]             BEQ   L17 ;abs = 0017
  0013          L13:    
  160:      return gRadioErrRadioBussy_c;    
  0013 a602     [2]             LDA   #2
  0015 2020     [3]             BRA   L37 ;abs = 0037
  0017          L17:    
  161:    }
  162:  
  163:    IRQ_DisableIrq();
  0017 1300     [5]             BCLR  1,_IRQSC
  164:    mRadioDriverState = mRadioStateReadingRegister_c;
  0019 a603     [2]             LDA   #3
  001b c70000   [4]             STA   mRadioDriverState
  165:    SPI1_WriteByteBlocking(regToRead | 0x80);
  001e 95       [2]             TSX   
  001f e602     [3]             LDA   2,X
  0021 aa80     [2]             ORA   #-128
  0023 cd0000   [6]             JSR   SPI1_WriteByteBlocking
  166:    (void)SPI1_ReadStringBlocking((uint8_t *)pu16RegValue, 2);
  0026 9efe01   [5]             LDHX  1,SP
  0029 a602     [2]             LDA   #2
  002b cd0000   [6]             JSR   SPI1_ReadStringBlocking
  167:    (void)SPI1_DeassertPeripheralSsPin();
  002e cd0000   [6]             JSR   SPI1_DeassertPeripheralSsPin
  168:    mRadioDriverState = mRadioStateIdle_c;
  0031 4f       [1]             CLRA  
  0032 c70000   [4]             STA   mRadioDriverState
  169:    
  170:    IRQ_EnableIrq();
  0035 1200     [5]             BSET  1,_IRQSC
  0037          L37:    
  171:    
  172:    return gRadioErrNoError_c;
  173:  }
  0037 a703     [2]             AIS   #3
  0039 81       [6]             RTS   
  174:  
  175:  /************************************************************************************
  176:  * Function to write data into one of the Radio Tx buffers
  177:  *
  178:  ************************************************************************************/
  179:  radioError_t Radio_WriteTxBuffer
  180:  (
  181:    uint8_t *         pu8WrittingString, //IN, Pointer to the string to write on the Radio
  182:    uint8_t           u8StringLenght,    //IN, String Lenght
  183:    radioCallback_t   writeCallback,     /*IN, Callback function to be called at the end  
  184:                                               of the buffer write*/
  185:    radioUtilBlock_t  allowToBlock       /*IN, Specifies if the function shall wait until 
  186:                                               the buffer is writted*/
  187:  )
  188:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 87       [2]             PSHA  
  0003 a7fd     [2]             AIS   #-3
  189:    uint8_t * pu8AuxPtr;
  190:    
  191:    if((NULL == pu8WrittingString) || (gRadioMaxDataLenght_c < u8StringLenght)){
  0005 9efe0a   [5]             LDHX  10,SP
  0008 2707     [3]             BEQ   L11 ;abs = 0011
  000a 95       [2]             TSX   
  000b e608     [3]             LDA   8,X
  000d a180     [2]             CMP   #-128
  000f 2304     [3]             BLS   L15 ;abs = 0015
  0011          L11:    
  192:      return gRadioErrInvalidParameter_c;
  0011 a601     [2]             LDA   #1
  0013 2012     [3]             BRA   L27 ;abs = 0027
  0015          L15:    
  193:    }
  194:    
  195:    if(mRadioAreRadioOrSPIBusy){
  0015 c60000   [4]             LDA   mRadioDriverState
  0018 260b     [3]             BNE   L25 ;abs = 0025
  001a a601     [2]             LDA   #1
  001c 450000   [3]             LDHX  @RadioProcess
  001f cd0000   [6]             JSR   SPI1_AssertPeripheralSsPin
  0022 4d       [1]             TSTA  
  0023 2705     [3]             BEQ   L2A ;abs = 002a
  0025          L25:    
  196:      return gRadioErrRadioBussy_c;    
  0025 a602     [2]             LDA   #2
  0027          L27:    
  0027 cc00c6   [4]             JMP   LC6 ;abs = 00c6
  002a          L2A:    
  197:    }
  198:    mRadioDriverState = mRadioStateWrittingTxBuffer_c;
  002a a604     [2]             LDA   #4
  002c c70000   [4]             STA   mRadioDriverState
  199:    
  200:    IRQ_DisableIrq();
  002f 1300     [5]             BCLR  1,_IRQSC
  201:    /*Copies the user string to the driver's buffer */
  202:    pu8AuxPtr = mau8RadioDataBuffer;
  0031 450000   [3]             LDHX  @mau8RadioDataBuffer
  0034 9eff01   [5]             STHX  1,SP
  203:    RadioStringCopyBigToLittleEndian(pu8WrittingString,pu8AuxPtr,u8StringLenght);
  0037 95       [2]             TSX   
  0038 6f02     [5]             CLR   2,X
  003a 202b     [3]             BRA   L67 ;abs = 0067
  003c          L3C:    
  003c 9efe0a   [5]             LDHX  10,SP
  003f e601     [3]             LDA   1,X
  0041 89       [2]             PSHX  
  0042 8b       [2]             PSHH  
  0043 9efe03   [5]             LDHX  3,SP
  0046 f7       [2]             STA   ,X
  0047 95       [2]             TSX   
  0048 6c03     [5]             INC   3,X
  004a 2602     [3]             BNE   L4E ;abs = 004e
  004c 6c02     [5]             INC   2,X
  004e          L4E:    
  004e 9efe0c   [5]             LDHX  12,SP
  0051 f6       [3]             LDA   ,X
  0052 9efe03   [5]             LDHX  3,SP
  0055 f7       [2]             STA   ,X
  0056 95       [2]             TSX   
  0057 6c03     [5]             INC   3,X
  0059 2602     [3]             BNE   L5D ;abs = 005d
  005b 6c02     [5]             INC   2,X
  005d          L5D:    
  005d 8a       [3]             PULH  
  005e 88       [3]             PULX  
  005f af02     [2]             AIX   #2
  0061 9eff0a   [5]             STHX  10,SP
  0064 95       [2]             TSX   
  0065 6c02     [5]             INC   2,X
  0067          L67:    
  0067 e608     [3]             LDA   8,X
  0069 44       [1]             LSRA  
  006a e102     [3]             CMP   2,X
  006c 22ce     [3]             BHI   L3C ;abs = 003c
  006e e608     [3]             LDA   8,X
  0070 a501     [2]             BIT   #1
  0072 271a     [3]             BEQ   L8E ;abs = 008e
  0074 9efe01   [5]             LDHX  1,SP
  0077 7f       [4]             CLR   ,X
  0078 95       [2]             TSX   
  0079 6c01     [5]             INC   1,X
  007b 2601     [3]             BNE   L7E ;abs = 007e
  007d 7c       [4]             INC   ,X
  007e          L7E:    
  007e 9efe0a   [5]             LDHX  10,SP
  0081 f6       [3]             LDA   ,X
  0082 9efe01   [5]             LDHX  1,SP
  0085 f7       [2]             STA   ,X
  0086 95       [2]             TSX   
  0087 6c01     [5]             INC   1,X
  0089 2601     [3]             BNE   L8C ;abs = 008c
  008b 7c       [4]             INC   ,X
  008c          L8C:    
  008c 6c08     [5]             INC   8,X
  008e          L8E:    
  204:   
  205:    if(gRadioNoBlock_d == allowToBlock){
  008e 6d03     [4]             TST   3,X
  0090 261c     [3]             BNE   LAE ;abs = 00ae
  206:      mpfRadioProcessCallback = writeCallback;
  0092 9efe05   [5]             LDHX  5,SP
  0095 960000   [5]             STHX  mpfRadioProcessCallback
  207:      mau8RadioDataLength = u8StringLenght;
  0098 95       [2]             TSX   
  0099 e608     [3]             LDA   8,X
  009b c70000   [4]             STA   mau8RadioDataLength
  208:  
  209:      mRadioDriverState = mRadioStateWrittingTxBuffer_c;
  009e a604     [2]             LDA   #4
  00a0 c70000   [4]             STA   mRadioDriverState
  210:      mRadioProcessState = mRadioProcessSendingAddres_c;
  00a3 a601     [2]             LDA   #1
  00a5 c70000   [4]             STA   mRadioProcessState
  211:      (void)SPI1_WriteByte(gRadioTxPktRAMReg_c & 0x7F);
  00a8 4c       [1]             INCA  
  00a9 cd0000   [6]             JSR   SPI1_WriteByte
  212:    }
  00ac 2017     [3]             BRA   LC5 ;abs = 00c5
  00ae          LAE:    
  213:    else
  214:    {
  215:      SPI1_WriteByteBlocking(gRadioTxPktRAMReg_c & 0x7F);
  00ae a602     [2]             LDA   #2
  00b0 cd0000   [6]             JSR   SPI1_WriteByteBlocking
  216:      (void)SPI1_WriteStringBlocking(mau8RadioDataBuffer, u8StringLenght);
  00b3 450000   [3]             LDHX  @mau8RadioDataBuffer
  00b6 9ee609   [4]             LDA   9,SP
  00b9 cd0000   [6]             JSR   SPI1_WriteStringBlocking
  217:      (void)SPI1_DeassertPeripheralSsPin();
  00bc cd0000   [6]             JSR   SPI1_DeassertPeripheralSsPin
  218:      mRadioDriverState = mRadioStateIdle_c;
  00bf 4f       [1]             CLRA  
  00c0 c70000   [4]             STA   mRadioDriverState
  219:      IRQ_EnableIrq();
  00c3 1200     [5]             BSET  1,_IRQSC
  00c5          LC5:    
  220:    }
  221:  
  222:    return gRadioErrNoError_c;
  00c5 4f       [1]             CLRA  
  00c6          LC6:    
  223:  }
  00c6 a706     [2]             AIS   #6
  00c8 81       [6]             RTS   
  224:  
  225:  /************************************************************************************
  226:  * Function to read data from the Radio Rx buffer
  227:  *
  228:  ************************************************************************************/
  229:  radioError_t Radio_ReadRxBuffer
  230:  (
  231:    uint8_t *         pu8ReadingString,
  232:    uint8_t           u8StringLenght,
  233:    radioCallback_t   readCallback,     /*IN, Callback function to be called at the end  
  234:                                              of the buffer read*/
  235:    radioUtilBlock_t  allowToBlock      /*IN, Specifyes if the function shall wait until 
  236:                                              the buffer is read*/
  237:  )
  238:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 87       [2]             PSHA  
  239:    if((NULL == pu8ReadingString) || (gRadioMaxDataLenght_c < u8StringLenght)){
  0003 9efe07   [5]             LDHX  7,SP
  0006 2707     [3]             BEQ   LF ;abs = 000f
  0008 95       [2]             TSX   
  0009 e605     [3]             LDA   5,X
  000b a180     [2]             CMP   #-128
  000d 2304     [3]             BLS   L13 ;abs = 0013
  000f          LF:     
  240:      return gRadioErrInvalidParameter_c;
  000f a601     [2]             LDA   #1
  0011 205d     [3]             BRA   L70 ;abs = 0070
  0013          L13:    
  241:    }
  242:    
  243:    if(mRadioAreRadioOrSPIBusy){
  0013 c60000   [4]             LDA   mRadioDriverState
  0016 260b     [3]             BNE   L23 ;abs = 0023
  0018 a601     [2]             LDA   #1
  001a 450000   [3]             LDHX  @RadioProcess
  001d cd0000   [6]             JSR   SPI1_AssertPeripheralSsPin
  0020 4d       [1]             TSTA  
  0021 2704     [3]             BEQ   L27 ;abs = 0027
  0023          L23:    
  244:      return gRadioErrRadioBussy_c;    
  0023 a602     [2]             LDA   #2
  0025 2049     [3]             BRA   L70 ;abs = 0070
  0027          L27:    
  245:    }
  246:    mRadioDriverState = mRadioStateReadingRxBuffer_c;
  0027 a605     [2]             LDA   #5
  0029 c70000   [4]             STA   mRadioDriverState
  247:  
  248:    IRQ_DisableIrq();
  002c 1300     [5]             BCLR  1,_IRQSC
  249:    
  250:    
  251:    if(gRadioNoBlock_d == allowToBlock)
  002e 95       [2]             TSX   
  002f 7d       [3]             TST   ,X
  0030 261e     [3]             BNE   L50 ;abs = 0050
  252:    {
  253:      mpu8RadioRxPointer = pu8ReadingString;
  0032 9efe07   [5]             LDHX  7,SP
  0035 960000   [5]             STHX  mpu8RadioRxPointer
  254:      mpfRadioProcessCallback     = readCallback;
  0038 9efe02   [5]             LDHX  2,SP
  003b 960000   [5]             STHX  mpfRadioProcessCallback
  255:      mau8RadioDataLength         = u8StringLenght;
  003e 95       [2]             TSX   
  003f e605     [3]             LDA   5,X
  0041 c70000   [4]             STA   mau8RadioDataLength
  256:  
  257:      mRadioProcessState = mRadioProcessSendingAddres_c;
  0044 a601     [2]             LDA   #1
  0046 c70000   [4]             STA   mRadioProcessState
  258:    
  259:     (void)SPI1_WriteByte(gRadioRxPktRAMReg_c | 0x80);
  0049 a681     [2]             LDA   #-127
  004b cd0000   [6]             JSR   SPI1_WriteByte
  260:    }
  004e 201f     [3]             BRA   L6F ;abs = 006f
  0050          L50:    
  261:    else
  262:    {
  263:      SPI1_WriteByteBlocking(gRadioRxPktRAMReg_c | 0x80);
  0050 a681     [2]             LDA   #-127
  0052 cd0000   [6]             JSR   SPI1_WriteByteBlocking
  264:      (void)SPI1_ReadStringBlocking(pu8ReadingString, 2);
  0055 9efe07   [5]             LDHX  7,SP
  0058 a602     [2]             LDA   #2
  005a cd0000   [6]             JSR   SPI1_ReadStringBlocking
  265:      (void)SPI1_ReadStringBlocking(pu8ReadingString, u8StringLenght);    
  005d 9efe07   [5]             LDHX  7,SP
  0060 9ee606   [4]             LDA   6,SP
  0063 cd0000   [6]             JSR   SPI1_ReadStringBlocking
  266:      (void)SPI1_DeassertPeripheralSsPin();
  0066 cd0000   [6]             JSR   SPI1_DeassertPeripheralSsPin
  267:      mRadioDriverState = mRadioStateIdle_c;
  0069 4f       [1]             CLRA  
  006a c70000   [4]             STA   mRadioDriverState
  268:      IRQ_EnableIrq();
  006d 1200     [5]             BSET  1,_IRQSC
  006f          L6F:    
  269:    }
  270:  
  271:    return gRadioErrNoError_c;
  006f 4f       [1]             CLRA  
  0070          L70:    
  272:  }
  0070 a703     [2]             AIS   #3
  0072 81       [6]             RTS   
  273:  
  274:  /************************************************************************************
  275:  * Function to know if the Radio driver is on Idle state
  276:  *
  277:  ************************************************************************************/
  278:  bool_t Radio_IsRadioIdle(void)
  279:  {
  280:    if(mRadioStateIdle_c != mRadioDriverState){
  0000 c60000   [4]             LDA   mRadioDriverState
  0003 2702     [3]             BEQ   L7 ;abs = 0007
  281:      return FALSE;
  0005 4f       [1]             CLRA  
  0006 81       [6]             RTS   
  0007          L7:     
  282:    }
  283:    else{
  284:      return TRUE;
  0007 a601     [2]             LDA   #1
  285:    }
  286:  }
  0009 81       [6]             RTS   
  287:  
  288:  
  289:  /************************************************************************************
  290:  * ...
  291:  *
  292:  *
  293:  ************************************************************************************/
  294:  void Radio_EnableRadioInterrupts(void)
  295:  {
  296:    IRQ_EnableIrq();
  0000 1200     [5]             BSET  1,_IRQSC
  297:    mSpi1EnableRxInterrupt();
  0002 1e00     [5]             BSET  7,_SPI1C1
  298:    mSpi1EnableTxInterrupt();
  0004 1a00     [5]             BSET  5,_SPI1C1
  299:  }
  0006 81       [6]             RTS   
  300:  
  301:  /************************************************************************************
  302:  * ...
  303:  *
  304:  *
  305:  ************************************************************************************/
  306:  void Radio_DisableRadioInterrupts(void)
  307:  {
  308:    IRQ_DisableIrq();
  0000 1300     [5]             BCLR  1,_IRQSC
  309:    mSpi1DisableRxInterrupt();
  0002 1f00     [5]             BCLR  7,_SPI1C1
  310:    mSpi1DisableTxInterrupt();
  0004 1b00     [5]             BCLR  5,_SPI1C1
  311:  }
  0006 81       [6]             RTS   
  312:  
  313:  /************************************************************************************
  314:  *************************************************************************************
  315:  * private functions
  316:  *************************************************************************************
  317:  ************************************************************************************/
  318:  /***********************************************************************************/
  319:  /*Callback function called by the IRQ driver*/
  320:  void RadioIRQServiceRoutine(void)
  321:  {
  0000 8b       [2]             PSHH  
  322:    volatile radioError_t RadError;
  323:    
  324:    IRQ_DisableIrq();
  0001 1300     [5]             BCLR  1,_IRQSC
  325:    /*Some functionality from the LPW library shall be included
  326:    here to allow the radio driver to work on LPW mode*/
  327:    RadError = Radio_ReadRegister\
  0003 a624     [2]             LDA   #36
  0005 87       [2]             PSHA  
  0006 450000   [3]             LDHX  @gu16RadioIrqStatus
  0009 89       [2]             PSHX  
  000a 8b       [2]             PSHH  
  000b 320000   [5]             LDHX  mpfRadioEventCallback
  000e cd0000   [6]             JSR   Radio_ReadRegister
  0011 a703     [2]             AIS   #3
  0013 95       [2]             TSX   
  0014 f7       [2]             STA   ,X
  328:    (gRadioIRQStatusReg_c, &gu16RadioIrqStatus, mpfRadioEventCallback);
  329:  }
  0015 8a       [3]             PULH  
  0016 81       [6]             RTS   
  330:  
  331:  
  332:  /***********************************************************************************/
  333:  void RadioInitControlSignals(void)
  334:  {
  335:    (void)Gpio_PinClear(gRadioAttnPort_c, gRadioAttnPinMask_c);
  0000 ae02     [2]             LDX   #2
  0002 9f       [1]             TXA   
  0003 ac000000 [8]             CALL  Gpio_PinClear
  336:    (void)Gpio_PinClear(gRadioRxTxEnablePort_c, gRadioRxTxEnablePinMask_c);
  0007 ae02     [2]             LDX   #2
  0009 a604     [2]             LDA   #4
  000b ac000000 [8]             CALL  Gpio_PinClear
  337:    (void)Gpio_PinSet(gRadioResetRadioPort_c, gRadioResetRadioPinMask_c);
  000f ae02     [2]             LDX   #2
  0011 a601     [2]             LDA   #1
  0013 ac000000 [8]             CALL  Gpio_PinSet
  338:  }
  0017 81       [6]             RTS   
  339:  
  340:  /***********************************************************************************/
  341:  void RadioProcess(void)
  342:  {
  0000 8b       [2]             PSHH  
  343:    volatile spiErr_t SpiResp;
  344:  
  345:    if(mRadioProcessSendingAddres_c == mRadioProcessState){
  0001 c60000   [4]             LDA   mRadioProcessState
  0004 a101     [2]             CMP   #1
  0006 264a     [3]             BNE   L52 ;abs = 0052
  346:      mRadioProcessState = mRadioProcessRdWrData_c;
  0008 a603     [2]             LDA   #3
  000a c70000   [4]             STA   mRadioProcessState
  347:      switch(mRadioDriverState){
  000d c60000   [4]             LDA   mRadioDriverState
  0010 a105     [2]             CMP   #5
  0012 2267     [3]             BHI   L7B ;abs = 007b
  0014 41020c   [4]             CBEQA #2,L23 ;abs = 0023
  0017 410313   [4]             CBEQA #3,L2D ;abs = 002d
  001a 41041a   [4]             CBEQA #4,L37 ;abs = 0037
  001d a105     [2]             CMP   #5
  001f 265a     [3]             BNE   L7B ;abs = 007b
  0021 2021     [3]             BRA   L44 ;abs = 0044
  0023          L23:    
  348:        case mRadioStateWrittingRegister_c:
  349:         SpiResp = SPI1_WriteString((uint8_t *)&mu16WrittingRegisterValue,2);   
  0023 450000   [3]             LDHX  @mu16WrittingRegisterValue
  0026 a602     [2]             LDA   #2
  0028 cd0000   [6]             JSR   SPI1_WriteString
  350:        break;
  002b 2013     [3]             BRA   L40 ;abs = 0040
  002d          L2D:    
  351:        case mRadioStateReadingRegister_c:
  352:         SpiResp = SPI1_ReadString((uint8_t *)mpu16ReadingRegisterPointer,2);       
  002d 320000   [5]             LDHX  mpu16ReadingRegisterPointer
  0030 a602     [2]             LDA   #2
  0032 cd0000   [6]             JSR   SPI1_ReadString
  353:        break;
  0035 2009     [3]             BRA   L40 ;abs = 0040
  0037          L37:    
  354:        case mRadioStateWrittingTxBuffer_c:
  355:         SpiResp = SPI1_WriteString(mau8RadioDataBuffer,mau8RadioDataLength);   
  0037 450000   [3]             LDHX  @mau8RadioDataBuffer
  003a c60000   [4]             LDA   mau8RadioDataLength
  003d cd0000   [6]             JSR   SPI1_WriteString
  0040          L40:    
  0040 95       [2]             TSX   
  0041 f7       [2]             STA   ,X
  356:        break;
  357:        case mRadioStateReadingRxBuffer_c:
  358:         SpiResp = SPI1_ReadString(mpu8RadioRxPointer,2);
  359:         mRadioProcessState = mRadioProcessDiscartingBytes_c;       
  360:        break;
  361:        default:
  362:        break;
  363:      }
  364:    }
  365:    else if(mRadioProcessDiscartingBytes_c == mRadioProcessState){
  366:       SpiResp = SPI1_ReadString(mpu8RadioRxPointer,mau8RadioDataLength);
  367:       mRadioProcessState = mRadioProcessRdWrData_c;       
  368:    }
  369:    else{
  370:      mRadioProcessState = mRadioProcessIdle_c;
  371:      (void)SPI1_DeassertPeripheralSsPin();
  372:      mRadioDriverState = mRadioStateIdle_c;    
  373:      if(NULL != mpfRadioProcessCallback){
  374:       mpfRadioProcessCallback();
  375:      }
  376:      IRQ_EnableIrq();
  377:    }
  378:  }
  0042 8a       [3]             PULH  
  0043 81       [6]             RTS   
  0044          L44:    
  0044 320000   [5]             LDHX  mpu8RadioRxPointer
  0047 a602     [2]             LDA   #2
  0049 cd0000   [6]             JSR   SPI1_ReadString
  004c 95       [2]             TSX   
  004d f7       [2]             STA   ,X
  004e a602     [2]             LDA   #2
  0050 2011     [3]             BRA   L63 ;abs = 0063
  0052          L52:    
  0052 a102     [2]             CMP   #2
  0054 2612     [3]             BNE   L68 ;abs = 0068
  0056 320000   [5]             LDHX  mpu8RadioRxPointer
  0059 c60000   [4]             LDA   mau8RadioDataLength
  005c cd0000   [6]             JSR   SPI1_ReadString
  005f 95       [2]             TSX   
  0060 f7       [2]             STA   ,X
  0061 a603     [2]             LDA   #3
  0063          L63:    
  0063 c70000   [4]             STA   mRadioProcessState
  0066 8a       [3]             PULH  
  0067 81       [6]             RTS   
  0068          L68:    
  0068 4f       [1]             CLRA  
  0069 c70000   [4]             STA   mRadioProcessState
  006c cd0000   [6]             JSR   SPI1_DeassertPeripheralSsPin
  006f 4f       [1]             CLRA  
  0070 c70000   [4]             STA   mRadioDriverState
  0073 320000   [5]             LDHX  mpfRadioProcessCallback
  0076 2701     [3]             BEQ   L79 ;abs = 0079
  0078 fd       [5]             JSR   ,X
  0079          L79:    
  0079 1200     [5]             BSET  1,_IRQSC
  007b          L7B:    
  007b 8a       [3]             PULH  
  007c 81       [6]             RTS   
  379:  
  380:  #pragma CODE_SEG DEFAULT
  381:  
  382:  /***********************************************************************************/
  383:  
  384:  
  385:  
  386:  
  387:  
  388:  
  389:  
  390:  
  391:  
  392:  
  393:  
  394:  
  395:  
  396:  
  397:  
  398:  
  399:  
  400:  
  401:  
  402:  
  403:  
  404:  
  405:  
  406:  
  407:  
  408:  
  409:  
  410:  
  411:  
