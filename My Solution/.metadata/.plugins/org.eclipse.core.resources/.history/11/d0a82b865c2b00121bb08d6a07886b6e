ANSI-C/cC++ Compiler for HC08 V-5.0.39 Build 11346, Dec 13 2011

    1:  /*****************************************************************************                   
    2:  * Low Power Modes driver implementation.
    3:  * Driver to manage the power modes available in the MCU
    4:  * 
    5:  * Copyright (c) 2010, Freescale, Inc. All rights reserved.
    6:  *
    7:  * 
    8:  * No part of this document must be reproduced in any form - including copied,
    9:  * transcribed, printed or by any electronic means - without specific written
   10:  * permission from Freescale Semiconductor.
   11:  *
   12:  *****************************************************************************/
   13:  
   14:  
   15:  #include "LPM.h"
   16:  #include "LPM_Interface.h"
   17:  
   18:  
   19:  
   20:  /************************************************************************************
   21:  *************************************************************************************
   22:  * Interface macros
   23:  *************************************************************************************
   24:  ************************************************************************************/                                         
   25:  
   26:  
   27:  
   28:  #if gLPMSupported_d == TRUE
   29:  /************************************************************************************
   30:  *************************************************************************************
   31:  * Private memory declarations
   32:  *************************************************************************************
   33:  ************************************************************************************/
   34:  #if defined(gMc1323xPlatform_d) || defined(gMcs08qe128Platform_d)
   35:  static lowPowerMode_t mActualLowPowerMode = mRunMode_c;
   36:  #endif
   37:  
   38:  /************************************************************************************
   39:  *************************************************************************************
   40:  * Interface functions
   41:  *************************************************************************************
   42:  ************************************************************************************/
   43:  /************************************************************************************
   44:  *
   45:  *  LPM_LPRunMode
   46:  *
   47:  ************************************************************************************/
   48:  #if defined(gMc1323xPlatform_d) || defined(gMcs08qe128Platform_d)
   49:  
   50:    void LPM_LPRunMode
   51:    (
   52:    void
   53:    )
   54:    {
   55:  
   56:      mActualLowPowerMode = mLPRunMode_c;
   57:      
   58:      if(1 == SPMSC1_LVDE) 
   59:      {
   60:        SPMSC1_LVDSE = 0;
   61:      }
   62:        
   63:      SPMSC2_PPDC = 0;
   64:      SPMSC2_LPR = 1;
   65:      
   66:    }
   67:  
   68:  #endif
   69:  
   70:  /************************************************************************************
   71:  *
   72:  *  LPM_Stop3Mode
   73:  *
   74:  ************************************************************************************/
   75:  
   76:  void LPM_Stop3Mode
   77:  (
   78:  bool_t bVoltageRegulatorRemainsActive
   79:  )
   80:  {
   81:  
   82:    #if defined(gMc1323xPlatform_d) || defined(gMcs08qe128Platform_d)
   83:      SPMSC1_LVDE = bVoltageRegulatorRemainsActive;           //Voltage regulator remains active OR NOT during stop mode
   84:      SPMSC1_LVDSE = bVoltageRegulatorRemainsActive;
   85:      SPMSC2_PPDC = 0;
   86:      _Stop;
   87:    #endif  
   88:    
   89:    #if defined(gMcs08Gt60Platform_d)
   90:      (void)bVoltageRegulatorRemainsActive;
   91:      SPMSC1_LVDE = 1;
   92:      SPMSC1_LVDSE = 1;
   93:      _Stop;
   94:    #endif 
   95:  
   96:  }
   97:  
   98:  /************************************************************************************
   99:  *
  100:  *  LPM_Stop2Mode
  101:  *
  102:  ************************************************************************************/
  103:  
  104:  lpmError_t LPM_Stop2Mode
  105:  (
  106:  void
  107:  )
  108:  {
  109:  
  110:  #if defined(gMc1323xPlatform_d) || defined(gMcs08qe128Platform_d)
  111:    if(mLPRunMode_c == mActualLowPowerMode)
  112:    {
  113:      return gLpmErrorTransitionNotSupported_c;
  114:    }
  115:    else
  116:    {                 
  117:      
  118:        SPMSC1_LVDSE = 0;
  119:        SPMSC2_LPR   = 0;
  120:        _Nop;
  121:        _Nop;
  122:        _Nop;
  123:        SPMSC2_PPDC = 1;                          
  124:        _Stop;     
  125:    }
  126:  #endif
  127:  
  128:  #if defined(gMcs08Gt60Platform_d)
  129:    SPMSC1_LVDSE = 0;
  130:    _Stop;
  131:  #endif
  132:  
  133:      return gLpmErrorNoError_c;
  134:  
  135:  }
  136:  
  137:  /************************************************************************************
  138:  *
  139:  *  LPM_WaitMode
  140:  *
  141:  ************************************************************************************/
  142:  
  143:  lpmError_t LPM_WaitMode
  144:  (
  145:  void
  146:  )
  147:  {
  148:    #if defined(gMc1323xPlatform_d) || defined(gMcs08qe128Platform_d)
  149:      if(mLPRunMode_c == mActualLowPowerMode)
  150:      {
  151:        return gLpmErrorTransitionNotSupported_c;
  152:      } 
  153:      else
  154:      {                 
  155:        _Wait;
  156:      }
  157:    #endif
  158:  
  159:    #if defined(gMcs08Gt60Platform_d)
  160:      _Wait;
  161:    #endif  
  162:    
  163:    return gLpmErrorNoError_c;
  164:  
  165:  }
  166:  
  167:  #if defined(gMc1323xPlatform_d) || defined(gMcs08qe128Platform_d)
  168:  
  169:  /************************************************************************************
  170:  *
  171:  *  LPM_RunMode
  172:  *
  173:  ************************************************************************************/
  174:  
  175:  void LPM_RunMode
  176:  (
  177:  void
  178:  )
  179:  {
  180:    SPMSC2_LPR = 0;    
  181:    mActualLowPowerMode = mRunMode_c;
  182:  
  183:  }
  184:  
  185:  /************************************************************************************
  186:  *
  187:  *  LPM_LPWaitMode
  188:  *
  189:  ************************************************************************************/
  190:  
  191:  
  192:  lpmError_t LPM_LPWaitMode
  193:  (
  194:  void
  195:  )
  196:  {
  197:    
  198:    if(mRunMode_c == mActualLowPowerMode)
  199:    {
  200:      return gLpmErrorTransitionNotSupported_c;
  201:    } 
  202:    else
  203:    {
  204:      _Wait;
  205:    }
  206:    
  207:    return gLpmErrorNoError_c;
  208:  
  209:  }
  210:  
  211:  #endif
  212:  
  213:  #else                      /* If gLPMSupported_d == FALSE     */
  214:  
  215:  /************************************************************************************
  216:  *************************************************************************************
  217:  * Interface functions
  218:  *************************************************************************************
  219:  ************************************************************************************/
  220:  /************************************************************************************
  221:  *
  222:  *  LPM_LPRunMode
  223:  *
  224:  ************************************************************************************/
  225:  #if defined(gMc1323xPlatform_d) || defined(gMcs08qe128Platform_d)
  226:  
  227:    void LPM_LPRunMode
  228:    (
  229:    void
  230:    )
  231:    {
  232:  
  233:          
  234:    }
  0000 8d       [7]             RTC   
  235:  
  236:  #endif
  237:  
  238:  /************************************************************************************
  239:  *
  240:  *  LPM_Stop3Mode
  241:  *
  242:  ************************************************************************************/
  243:  
  244:  void LPM_Stop3Mode
  245:  (
  246:  bool_t bVoltageRegulatorRemainsActive
  247:  )
  248:  {
  249:  
  250:      (void)bVoltageRegulatorRemainsActive;        
  251:  }
  0000 8d       [7]             RTC   
  252:  
  253:  /************************************************************************************
  254:  *
  255:  *  LPM_Stop2Mode
  256:  *
  257:  ************************************************************************************/
  258:  
  259:  lpmError_t LPM_Stop2Mode
  260:  (
  261:  void
  262:  )
  263:  {
  264:  
  265:      return gLpmErrorNoError_c;
  0000 4f       [1]             CLRA  
  266:  
  267:  }
  0001 8d       [7]             RTC   
  268:  
  269:  /************************************************************************************
  270:  *
  271:  *  LPM_WaitMode
  272:  *
  273:  ************************************************************************************/
  274:  
  275:  lpmError_t LPM_WaitMode
  276:  (
  277:  void
  278:  )
  279:  {
  280:      return gLpmErrorNoError_c; 
  0000 4f       [1]             CLRA  
  281:  }
  0001 8d       [7]             RTC   
  282:  
  283:  #if defined(gMc1323xPlatform_d) || defined(gMcs08qe128Platform_d)
  284:  
  285:  /************************************************************************************
  286:  *
  287:  *  LPM_RunMode
  288:  *
  289:  ************************************************************************************/
  290:  
  291:  void LPM_RunMode
  292:  (
  293:  void
  294:  )
  295:  {
  296:   
  297:  }
  0000 8d       [7]             RTC   
  298:  
  299:  /************************************************************************************
  300:  *
  301:  *  LPM_LPWaitMode
  302:  *
  303:  ************************************************************************************/
  304:  
  305:  
  306:  lpmError_t LPM_LPWaitMode
  307:  (
  308:  void
  309:  )
  310:  {
  311:    
  312:      return gLpmErrorNoError_c;  
  0000 4f       [1]             CLRA  
  313:  }
  0001 8d       [7]             RTC   
  314:  
  315:  #endif
  316:  
  317:  #endif
  318:  
  319:  
  320:  
