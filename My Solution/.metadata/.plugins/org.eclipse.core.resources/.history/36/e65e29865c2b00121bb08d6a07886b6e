ANSI-C/cC++ Compiler for HC08 V-5.0.39 Build 11346, Dec 13 2011

    1:  /******************************************************************************
    2:  * Source file for LED driver.
    3:  *
    4:  *
    5:  * (c) Copyright 2009, Freescale, Inc.  All rights reserved.
    6:  *
    7:  * 
    8:  * No part of this document must be reproduced in any form - including copied,
    9:  * transcribed, printed or by any electronic means - without specific written
   10:  * permission from Freescale.
   11:  *   
   12:  *******************************************************************************/
   13:  /*Include files section*/
   14:  
   15:  #include "LED.h"
   16:  #include "board_config.h"
   17:  
   18:  /************************************************************************************
   19:  *************************************************************************************
   20:  * Public type definitions
   21:  *************************************************************************************
   22:  ************************************************************************************/
   23:  
   24:  /************************************************************************************
   25:  *************************************************************************************
   26:  * Public macros
   27:  *************************************************************************************
   28:  ************************************************************************************/
   29:  
   30:  /************************************************************************************
   31:  *************************************************************************************
   32:  * Public prototypes
   33:  *************************************************************************************
   34:  ************************************************************************************/
   35:  
   36:  void Led_PrintValue(uint8_t LedHexValue);
   37:  void Led_OffAll(void);
   38:  void Led_OnAll(void);
   39:  
   40:  /************************************************************************************
   41:  *************************************************************************************
   42:  * Public memory declarations
   43:  *************************************************************************************
   44:  ************************************************************************************/
   45:  
   46:  /************************************************************************************
   47:  *************************************************************************************
   48:  * Public functions
   49:  *************************************************************************************
   50:  ************************************************************************************/
   51:  
   52:  #if gLEDSupported_d == TRUE
   53:  
   54:   /***********************************************************************************
   55:  * 
   56:  * Led_PrintValue
   57:  *
   58:  * The purpose of this function is to write a value on the LED port 
   59:  * 
   60:  *
   61:  ************************************************************************************/ 
   62:  
   63:  void Led_PrintValue
   64:  (
   65:    uint8_t LedHexValue
   66:  )
   67:  {
   68:    
   69:    if(LedHexValue <= 0x0F){
  0000 a10f     [2]             CMP   #15
  0002 223c     [3]             BHI   L40 ;abs = 0040
   70:    
   71:      Led_OffAll();
  0004 87       [2]             PSHA  
  0005 ac000000 [8]             CALL  Led_OffAll
   72:      
   73:      if(gLED1Mask_c & LedHexValue){
  0009 86       [3]             PULA  
  000a a508     [2]             BIT   #8
  000c 270a     [3]             BEQ   L18 ;abs = 0018
   74:        (void)Led_On(gLED1_c);
  000e ae04     [2]             LDX   #4
  0010 87       [2]             PSHA  
  0011 a608     [2]             LDA   #8
  0013 ac000000 [8]             CALL  Gpio_PinSet
  0017 86       [3]             PULA  
  0018          L18:    
   75:      }
   76:          
   77:      if(gLED2Mask_c & LedHexValue){
  0018 a504     [2]             BIT   #4
  001a 270a     [3]             BEQ   L26 ;abs = 0026
   78:        (void)Led_On(gLED2_c);
  001c ae04     [2]             LDX   #4
  001e 87       [2]             PSHA  
  001f a610     [2]             LDA   #16
  0021 ac000000 [8]             CALL  Gpio_PinSet
  0025 86       [3]             PULA  
  0026          L26:    
   79:      }
   80:        
   81:      if(gLED3Mask_c & LedHexValue){
  0026 a502     [2]             BIT   #2
  0028 270a     [3]             BEQ   L34 ;abs = 0034
   82:        (void)Led_On(gLED3_c);
  002a ae04     [2]             LDX   #4
  002c 87       [2]             PSHA  
  002d a620     [2]             LDA   #32
  002f ac000000 [8]             CALL  Gpio_PinSet
  0033 86       [3]             PULA  
  0034          L34:    
   83:      }
   84:        
   85:      if(gLED4Mask_c & LedHexValue){
  0034 a501     [2]             BIT   #1
  0036 2708     [3]             BEQ   L40 ;abs = 0040
   86:        (void)Led_On(gLED4_c);
  0038 ae04     [2]             LDX   #4
  003a a640     [2]             LDA   #64
  003c ac000000 [8]             CALL  Gpio_PinSet
  0040          L40:    
   87:      }
   88:    }
   89:  }
  0040 8d       [7]             RTC   
   90:  
   91:  
   92:   /***********************************************************************************
   93:  * 
   94:  * Led_OffAll
   95:  *
   96:  * The purpose of this function is to clear all the LEDs of the LED port 
   97:  * 
   98:  *
   99:  ************************************************************************************/ 
  100:  
  101:  void Led_OffAll(void){
  102:    
  103:    (void)Led_Off(gLED1_c);
  0000 ae04     [2]             LDX   #4
  0002 a608     [2]             LDA   #8
  0004 ac000000 [8]             CALL  Gpio_PinClear
  104:    (void)Led_Off(gLED2_c);
  0008 ae04     [2]             LDX   #4
  000a a610     [2]             LDA   #16
  000c ac000000 [8]             CALL  Gpio_PinClear
  105:    (void)Led_Off(gLED3_c);
  0010 ae04     [2]             LDX   #4
  0012 a620     [2]             LDA   #32
  0014 ac000000 [8]             CALL  Gpio_PinClear
  106:    (void)Led_Off(gLED4_c);
  0018 ae04     [2]             LDX   #4
  001a a640     [2]             LDA   #64
  001c ac000000 [8]             CALL  Gpio_PinClear
  107:     #if gTargetBoard_c == gMc1321xSrb_c
  108:    (void)Led_Off(gLED5_c);
  109:    #endif
  110:  
  111:  } 
  0020 8d       [7]             RTC   
  112:  
  113:   /***********************************************************************************
  114:  * 
  115:  * Led_OnAll
  116:  *
  117:  * The purpose of this function is to set all the LEDs of the LED port 
  118:  * 
  119:  *
  120:  ************************************************************************************/ 
  121:  
  122:  void Led_OnAll(void){
  123:    
  124:    (void)Led_On(gLED1_c);
  0000 ae04     [2]             LDX   #4
  0002 a608     [2]             LDA   #8
  0004 ac000000 [8]             CALL  Gpio_PinSet
  125:    (void)Led_On(gLED2_c);
  0008 ae04     [2]             LDX   #4
  000a a610     [2]             LDA   #16
  000c ac000000 [8]             CALL  Gpio_PinSet
  126:    (void)Led_On(gLED3_c);
  0010 ae04     [2]             LDX   #4
  0012 a620     [2]             LDA   #32
  0014 ac000000 [8]             CALL  Gpio_PinSet
  127:    (void)Led_On(gLED4_c);
  0018 ae04     [2]             LDX   #4
  001a a640     [2]             LDA   #64
  001c ac000000 [8]             CALL  Gpio_PinSet
  128:    #if gTargetBoard_c == gMc1321xSrb_c
  129:    (void)Led_On(gLED5_c);
  130:    #endif
  131:  
  132:  }
  0020 8d       [7]             RTC   
  133:  
  134:  
  135:  /************************************************************************************
  136:  
  137:    Function declaration when LED module is not used
  138:  
  139:  ************************************************************************************/
  140:  
  141:  #else
  142:  
  143:  void Led_PrintValue(uint8_t LedHexValue){ 
  144:    (void)LedHexValue;
  145:  }
  146:    
  147:  void Led_OffAll(void){
  148:  }
  149:  
  150:  void Led_OnAll(void){
  151:  }
  152:  
  153:  #endif
