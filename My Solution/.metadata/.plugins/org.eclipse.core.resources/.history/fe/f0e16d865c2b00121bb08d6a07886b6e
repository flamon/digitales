ANSI-C/cC++ Compiler for HC08 V-5.0.39 Build 11346, Dec 13 2011

    1:  /*****************************************************************************
    2:  * Generic App demo main file.
    3:  * 
    4:  * Copyright (c) 2010, Freescale, Inc. All rights reserved.
    5:  *
    6:  * 
    7:  * No part of this document must be reproduced in any form - including copied,
    8:  * transcribed, printed or by any electronic means - without specific written
    9:  * permission from Freescale Semiconductor.
   10:  *
   11:  *  The Generic App demo may be used as template to develop proprietary solutions.
   12:  *  This applications shows all the basic initialization required to start the 
   13:  *  Radio, run SMAC, and the commonly used peripherals such as UART, LEDs, and 
   14:  *  KBIs.
   15:  *
   16:  *****************************************************************************/
   17:  
   18:  
   19:  #include <hidef.h>                  /*EnableInterrupts macro*/
   20:  #include "McuInit.h"                /*CPU and System Clock related functions*/
   21:  #include "derivative.h"             /*System Clock related declarations*/
   22:  #include "EmbeddedTypes.h"          /*Include special data types*/             
   23:  #include "Utilities_Interface.h"    /*Include Blocking Delays and data conversion functions*/
   24:  #include "PLM_config.h"
   25:  #include "SMAC_Interface.h"         /*Include all OTA functionality*/
   26:  #include "Radio_Interface.h"        /*Include all Radio functionality*/
   27:  #include "app_config.h"
   28:  #include "OTAP_Interface.h"
   29:  
   30:  
   31:  /************************************************************************************
   32:  *************************************************************************************
   33:  * Private prototypes
   34:  *************************************************************************************
   35:  ************************************************************************************/
   36:  void InitProject(void);
   37:  void InitSmac(void);
   38:  
   39:  /* Place it in NON_BANKED memory */
   40:  #ifdef MEMORY_MODEL_BANKED
   41:  #pragma CODE_SEG __NEAR_SEG NON_BANKED
   42:  #else
   43:  #pragma CODE_SEG DEFAULT
   44:  #endif /* MEMORY_MODEL_BANKED */
   45:  
   46:  
   47:  void MLMEScanComfirm(channels_t ClearestChann);
   48:  void MLMEResetIndication(void);
   49:  void MLMEWakeComfirm(void);
   50:  void UartRxCallback(uint8_t u8UartFlags);
   51:  void UartTxCallback(void);
   52:  #if (TRUE == gKeyboardSupported_d) || (TRUE == gTouchpadSupported_d) || (TRUE == gKbiSupported_d)
   53:    void KbiCallback(kbiPressed_t PressedKey);
   54:  #endif
   55:  #if (gTargetBoard_c == gMc1323xRcm_c) || (gTargetBoard_c == gMc1323xRem_c)
   56:    void KeyboardCallback (keyboardButton_t keyPressed);
   57:  #endif
   58:  #if gTargetBoard_c == gMc1323xRcm_c
   59:    void TouchpadCallback(touchpadEvent_t * event);
   60:  #endif
   61:  void LCDCallback(lcdErrors_t lcdError);
   62:  
   63:  void MCPSDataComfirm(txStatus_t TransmissionResult);
   64:  void MCPSDataIndication(rxPacket_t *gsRxPacket);
   65:  
   66:  
   67:  /* Place your callbacks prototypes declarations here */
   68:  
   69:  #pragma CODE_SEG DEFAULT
   70:  
   71:  
   72:  
   73:  /************************************************************************************
   74:  *************************************************************************************
   75:  * Public memory declarations
   76:  *************************************************************************************
   77:  ************************************************************************************/
   78:  
   79:  
   80:  static uint8_t gau8RxDataBuffer[130]; /* 123 bytes is the SDU max size in non
   81:                                           promiscuous mode. 
   82:                                           125 bytes is the SDU max size in 
   83:                                           promiscuous mode. 
   84:                                           You have to consider the SDU plus 5 more 
   85:                                           bytes for SMAC header and that the buffer 
   86:                                           can not be bigger than 130 */
   87:  static uint8_t gau8TxDataBuffer[128]; /* This buffer can be as big as the biggest
   88:                                           packet to transmit in the app plus 3 
   89:                                           bytes reserved for SMAC packet header.
   90:                                           The buffer can not be bigger than 128 */
   91:          
   92:          
   93:  static txPacket_t * AppTxPacket;
   94:  static rxPacket_t * AppRxPacket;
   95:              
   96:  bool_t           bTxDone;
   97:  bool_t           bRxDone;
   98:  bool_t           bScanDone;
   99:  bool_t           KeyPressed;
  100:  channels_t       bestChannel;
  101:  
  102:  bool_t bUartDataInFlag;
  103:  bool_t bUartTxDone;  
  104:  uint8_t UartData;
  105:  uartPortNumber_t portNumber;  
  106:  uartConfigSet_t uartSettings;
  107:  
  108:  kbiConfig_t gKbiConfiguration; 
  109:  
  110:  
  111:  /************************************************************************************
  112:  *************************************************************************************
  113:  * Main application functions
  114:  *************************************************************************************
  115:  ************************************************************************************/
  116:  
  117:  void main(void) 
  118:  {
  119:  
  120:    MCUInit();
  0000 ac000000 [8]             CALL  MCUInit
  121:    EnableInterrupts; /* Enable interrupts */  
  0004 9a       [1]             CLI   
  122:    
  123:    InitProject();
  0005 ac000000 [8]             CALL  InitProject
  124:    InitSmac();
  0009 ac000000 [8]             CALL  InitSmac
  125:   
  126:    (void)Uart_BlockingStringTx("\f\r\n\r\n\t Generic Demonstration Application", gDefaultUartPort_c);
  000d 450000   [3]             LDHX  @"\014\015\012\015\012\011 Generic Demonstration Application"
  0010 4f       [1]             CLRA  
  0011 ac000000 [8]             CALL  Uart_BlockingStringTx
  0015          L15:    
  127:   
  128:    for(;;) 
  129:    {
  130:      Otap_OpcMain();
  0015 ac000000 [8]             CALL  Otap_OpcMain
  131:       
  132:      /* Put your own code here */
  133:        
  134:      __RESET_WATCHDOG();
  0019 c70000   [4]             STA   _SRS
  001c 20f7     [3]             BRA   L15 ;abs = 0015
  135:      
  136:    } 
  137:   
  138:  }
  139:  
  140:  
  141:  /************************************************************************************
  142:  *
  143:  * InitProject
  144:  *
  145:  ************************************************************************************/
  146:  void InitProject(void)
  147:  {
  148:    /* GPIO Initialization */ 
  149:    Gpio_Init();
  0000 ac000000 [8]             CALL  Gpio_Init
  150:      
  151:    /* UART Initialization */
  152:  #if TRUE == gUartSupported_d   
  153:    portNumber = gDefaultUartPort_c; 
  0004 4f       [1]             CLRA  
  0005 c70000   [4]             STA   portNumber
  154:    uartSettings.baudRate = gUartDefaultBaud_c;
  0008 ae0d     [2]             LDX   #13
  000a 8c       [1]             CLRH  
  000b 960000   [5]             STHX  uartSettings
  155:    uartSettings.dataBits = g8DataBits_c;
  000e a608     [2]             LDA   #8
  0010 c70002   [4]             STA   uartSettings:2
  156:    uartSettings.parity = gUartParityNone_c;
  0013 4f       [1]             CLRA  
  0014 c70003   [4]             STA   uartSettings:3
  157:    (void)Uart_Init();
  0017 ac000000 [8]             CALL  Uart_Init
  158:    (void)Uart_Configure(portNumber, &uartSettings);
  001b c60000   [4]             LDA   portNumber
  001e 450000   [3]             LDHX  @uartSettings
  0021 ac000000 [8]             CALL  Uart_Configure
  159:    (void)Uart_RegisterRxCallBack(UartRxCallback, gUartRxCbCodeNewByte_c, portNumber);
  0025 450000   [3]             LDHX  @UartRxCallback
  0028 89       [2]             PSHX  
  0029 8b       [2]             PSHH  
  002a ae04     [2]             LDX   #4
  002c c60000   [4]             LDA   portNumber
  002f ac000000 [8]             CALL  Uart_RegisterRxCallBack
  0033 a702     [2]             AIS   #2
  160:    (void)Uart_RegisterTxCallBack(UartTxCallback, portNumber);
  0035 450000   [3]             LDHX  @UartTxCallback
  0038 c60000   [4]             LDA   portNumber
  003b ac000000 [8]             CALL  Uart_RegisterTxCallBack
  161:    
  162:    
  163:  #endif
  164:  
  165:    
  166:   /* Timer Initialization */    
  167:    (void)Tmr_Init(); 
  003f cd0000   [6]             JSR   Tmr_Init
  168:    
  169:   /* KBI Initialization */
  170:    #if gTargetBoard_c == gMc1323xRcm_c || gTargetBoard_c == gMc1323xRem_c  
  171:    #if (gKeyboardSupported_d || gTouchpadSupported_d)    
  172:      gKbiConfiguration.Control.bit.TriggerByLevel = 0;
  173:      gKbiConfiguration.Control.bit.Interrupt = 1;
  174:      gKbiConfiguration.Control.bit.Acknowledge = 1;
  175:      gKbiConfiguration.InterruptPin.Port = gSwitchColmnMask_c|gTouchpadAttnPinMask_c;
  176:      gKbiConfiguration.EdgeSelect.Port = gSwitchColmnMask_c;
  177:      (void)Kbi_Init((kbiCallback_t)KbiCallback, &gKbiConfiguration, gSwitchKbiModule_c);
  178:      (void)Keyboard_InitKeyboard(KeyboardCallback);
  179:    #endif
  180:    #else
  181:      gKbiConfiguration.Control.bit.TriggerByLevel = 0;
  0042 450000   [3]             LDHX  @gKbiConfiguration
  0045 f6       [3]             LDA   ,X
  0046 a4fe     [2]             AND   #-2
  0048 f7       [2]             STA   ,X
  182:      gKbiConfiguration.Control.bit.Interrupt = 1;
  0049 aa02     [2]             ORA   #2
  004b f7       [2]             STA   ,X
  183:      gKbiConfiguration.Control.bit.Acknowledge = 1;
  004c aa04     [2]             ORA   #4
  004e f7       [2]             STA   ,X
  184:      gKbiConfiguration.InterruptPin.Port = gSwitchMask;
  004f a60f     [2]             LDA   #15
  0051 e701     [3]             STA   1,X
  185:      gKbiConfiguration.EdgeSelect.Port = 0;
  0053 4f       [1]             CLRA  
  0054 e702     [3]             STA   2,X
  186:      (void)Kbi_Init((kbiCallback_t)KbiCallback, &gKbiConfiguration, gSwitchKbiModule_c);
  0056 450000   [3]             LDHX  @KbiCallback
  0059 89       [2]             PSHX  
  005a 8b       [2]             PSHH  
  005b 450000   [3]             LDHX  @gKbiConfiguration
  005e 4c       [1]             INCA  
  005f ac000000 [8]             CALL  Kbi_Init
  0063 a702     [2]             AIS   #2
  187:    #endif 
  188:  
  189:    /* SPI Initialization */ 
  190:    SPI1_Init(gSpiBaudDivisor_2_c); 
  0065 4f       [1]             CLRA  
  0066 cd0000   [6]             JSR   SPI1_Init
  191:  
  192:    #if gTargetBoard_c == gMc1321xSrb_c || gTargetBoard_c == gMc1321xNcb_c || gTargetBoard_c == gMc1320xS08qe128Evb_c 
  193:      IRQ_Init(NULL);
  0069 5f       [1]             CLRX  
  006a 8c       [1]             CLRH  
  006b ac000000 [8]             CALL  IRQ_Init
  194:    #endif
  195:    
  196:    /* Touchpad Initialization */ 
  197:    #if gTargetBoard_c == gMc1323xRcm_c
  198:    (void)IIC_Init(mIic100KhzBaudInitParameters_c);
  199:    (void)Touchpad_DriverInit(TouchpadCallback, gGpioPortB_c, gGpioPin6Mask_c);
  200:    #endif
  201:    
  202:    /*LCD configuration*/
  203:    (void)Lcd_Init(LCDCallback);
  006f 450000   [3]             LDHX  @LCDCallback
  0072 ac000000 [8]             CALL  Lcd_Init
  204:    (void)Lcd_Config(TRUE,TRUE,FALSE);
  0076 ae01     [2]             LDX   #1
  0078 89       [2]             PSHX  
  0079 4f       [1]             CLRA  
  007a ac000000 [8]             CALL  Lcd_Config
  007e 8a       [3]             PULH  
  205:  
  206:  
  207:     /* OTAP Initialization */
  208:    Otap_OpcInit();
  007f ac000000 [8]             CALL  Otap_OpcInit
  209:      
  210:    /* Place your app initialization here */
  211:  
  212:  
  213:  }
  0083 8d       [7]             RTC   
  214:  
  215:  /************************************************************************************
  216:  *
  217:  * InitSmac
  218:  *
  219:  ************************************************************************************/
  220:  void InitSmac(void)
  221:  {
  222:      AppTxPacket = (txPacket_t*)gau8TxDataBuffer;
  0000 450000   [3]             LDHX  @gau8TxDataBuffer
  0003 960000   [5]             STHX  AppTxPacket
  223:      AppRxPacket = (rxPacket_t*)gau8RxDataBuffer; 
  0006 450000   [3]             LDHX  @gau8RxDataBuffer
  0009 960000   [5]             STHX  AppRxPacket
  224:      AppRxPacket->u8MaxDataLength = gMaxSmacSDULenght_c;
  000c a67b     [2]             LDA   #123
  000e f7       [2]             STA   ,X
  225:      
  226:      (void)MLMERadioInit();
  000f ac000000 [8]             CALL  MLMERadioInit
  227:      (void)MLMESetClockRate(gClko16MHz_c);
  0013 4f       [1]             CLRA  
  0014 ac000000 [8]             CALL  MLMESetClockRate
  228:      MCU_UseExternalClock();
  0018 ac000000 [8]             CALL  MCU_UseExternalClock
  229:      
  230:      (void)MLMESetTmrPrescale(gTimeBase250kHz_c);
  001c a603     [2]             LDA   #3
  001e ac000000 [8]             CALL  MLMESetTmrPrescale
  0022          L22:    
  231:      while (gErrorNoError_c != MLMESetChannelRequest(gDefaultChannelNumber_c));
  0022 a60f     [2]             LDA   #15
  0024 ac000000 [8]             CALL  MLMESetChannelRequest
  0028 4d       [1]             TSTA  
  0029 26f7     [3]             BNE   L22 ;abs = 0022
  232:      (void)MLMEPAOutputAdjust(gDefaultOutputPower_c);
  002b a608     [2]             LDA   #8
  002d ac000000 [8]             CALL  MLMEPAOutputAdjust
  233:      (void)MLMEFEGainAdjust(gGainOffset_c);
  0031 a69b     [2]             LDA   #-101
  0033 ac000000 [8]             CALL  MLMEFEGainAdjust
  234:   }
  0037 8d       [7]             RTC   
  235:  
  236:  
  237:  /* Place it in NON_BANKED memory */
  238:  #ifdef MEMORY_MODEL_BANKED
  239:  #pragma CODE_SEG __NEAR_SEG NON_BANKED
  240:  #else
  241:  #pragma CODE_SEG DEFAULT
  242:  #endif /* MEMORY_MODEL_BANKED */
  243:  
  244:  /************************************************************************************
  245:  * User's Callbacks
  246:  ************************************************************************************/
  247:  
  248:  /* Place your callbacks here */
  249:  
  250:  
  251:  
  252:  
  253:  
  254:  
  255:  
  256:  /************************************************************************************
  257:  *
  258:  * TouchpadCallback
  259:  *
  260:  ************************************************************************************/
  261:  #if gTargetBoard_c == gMc1323xRcm_c
  262:  void TouchpadCallback(touchpadEvent_t * event)
  263:  {
  264:    switch(event->EventType)
  265:    {
  266:      case gTouchpadBusError_c:
  267:           /* Place your implementation here */ 
  268:      break;
  269:      case gTouchpadGpioEvent_c:
  270:           /* Place your implementation here */
  271:      break;
  272:      case gTouchpadFingerPositionEvent_c:
  273:           /* Place your implementation here */
  274:      break;
  275:      case gTouchpadPinchGestureEvent_c:
  276:           /* Place your implementation here */ 
  277:      break;
  278:      case gTouchpadFlickGestureEvent_c:  
  279:           /* Place your implementation here */
  280:      break;
  281:      case gTouchpadEarlyTapGestureEvent_c:
  282:           /* Place your implementation here */
  283:      break;
  284:      case gTouchpadDoubleTapGestureEvent_c:
  285:           /* Place your implementation here */
  286:      break;
  287:      case gTouchpadTapAndHoldGestureEvent_c:
  288:           /* Place your implementation here */
  289:      break;
  290:      case gTouchpadSingleTapGestureEvent_c:
  291:           /* Place your implementation here */
  292:      break;
  293:      case gTouchpadDevStatusEvent_c:
  294:           /* Place your implementation here */
  295:      break;
  296:      case gTouchpadFlashEvent_c:
  297:           /* Place your implementation here */
  298:      break;
  299:      default:
  300:           /* Place your implementation here */ 
  301:      break;
  302:    }
  303:  }
  304:  #endif
  305:  
  306:  
  307:  /************************************************************************************
  308:  * UartTxCallback
  309:  * 
  310:  *
  311:  *
  312:  ************************************************************************************/
  313:  void UartTxCallback(void)
  314:  {
  315:      bUartTxDone = TRUE;  
  0000 a601     [2]             LDA   #1
  0002 c70000   [4]             STA   bUartTxDone
  316:  }
  0005 81       [6]             RTS   
  317:  
  318:  /************************************************************************************
  319:  * UartRxCallback
  320:  * 
  321:  *
  322:  *
  323:  ************************************************************************************/
  324:  void UartRxCallback(uint8_t u8UartFlags)
  325:  {
  0000 8b       [2]             PSHH  
  326:    uint8_t iByteNumber;
  327:    (void)u8UartFlags;
  328:    
  329:    iByteNumber = 1;
  0001 a601     [2]             LDA   #1
  0003 95       [2]             TSX   
  0004 f7       [2]             STA   ,X
  330:    
  331:    (void)Uart_GetBytesFromRxBuffer(&UartData, &iByteNumber, portNumber);
  0005 450000   [3]             LDHX  @UartData
  0008 89       [2]             PSHX  
  0009 8b       [2]             PSHH  
  000a 95       [2]             TSX   
  000b af02     [2]             AIX   #2
  000d c60000   [4]             LDA   portNumber
  0010 ac000000 [8]             CALL  Uart_GetBytesFromRxBuffer
  0014 a702     [2]             AIS   #2
  332:    bUartDataInFlag = TRUE;
  0016 a601     [2]             LDA   #1
  0018 c70000   [4]             STA   bUartDataInFlag
  333:   
  334:  }
  001b 8a       [3]             PULH  
  001c 81       [6]             RTS   
  335:  
  336:  #if (TRUE == gKeyboardSupported_d) || (TRUE == gTouchpadSupported_d) || (TRUE == gKbiSupported_d)
  337:  /************************************************************************************
  338:  * KbiCallback
  339:  * 
  340:  *  This function should be set as the Kbi callback function in Kbi_Init
  341:  *
  342:  ************************************************************************************/
  343:  #if gTargetBoard_c == gMc1323xRcm_c || gTargetBoard_c == gMc1323xRem_c
  344:  void KbiCallback(kbiPressed_t PressedKey)
  345:  {  
  346:    (void)PressedKey;
  347:    if(gKbiPressedKey0_c == PressedKey || gKbiPressedKey1_c == PressedKey || gKbiPressedKey2_c == PressedKey || gKbiPressedKey3_c == PressedKey \
  348:       || gKbiPressedKey4_c == PressedKey || gKbiPressedKey5_c == PressedKey)
  349:    {
  350:       Keyboard_KbiEvent(PressedKey);
  351:    }
  352:    else if (gKbiPressedKey6_c == PressedKey)
  353:    {
  354:       #if gTargetBoard_c == gMc1323xRcm_c
  355:       Touchpad_EventHandler();
  356:       #endif
  357:    }
  358:     
  359:  } 
  360:  #else
  361:  void KbiCallback(kbiPressed_t PressedKey)
  362:  {  
  363:    KeyPressed = TRUE;
  0000 a601     [2]             LDA   #1
  0002 c70000   [4]             STA   KeyPressed
  364:    switch(PressedKey)
  365:    {
  366:      case gKbiPressedKey0_c:
  367:        /* Place your implementation here */ 
  368:      break;
  369:      case gKbiPressedKey1_c:
  370:        /* Place your implementation here */ 
  371:      break;
  372:      case gKbiPressedKey2_c:
  373:        /* Place your implementation here */
  374:      break;
  375:      case gKbiPressedKey3_c:
  376:        /* Place your implementation here */
  377:      break;
  378:      default:
  379:      break;
  380:    }
  381:     
  382:  }
  0005 81       [6]             RTS   
  383:  
  384:  
  385:  #endif 
  386:        
  387:  #endif
  388:  
  389:  /************************************************************************************
  390:  * KeyboardCallback
  391:  * 
  392:  *
  393:  *
  394:  ************************************************************************************/
  395:  #if (gTargetBoard_c == gMc1323xRcm_c) || (gTargetBoard_c == gMc1323xRem_c)
  396:  
  397:  void KeyboardCallback(keyboardButton_t keyPressed)
  398:  {
  399:     KeyPressed = TRUE;
  400:     switch(keyPressed)
  401:     {
  402:      case gSw1_c:
  403:        /* Place your implementation here */ 
  404:      break;
  405:      
  406:      case gSw2_c:
  407:        /* Place your implementation here */
  408:      break;
  409:      
  410:      case gSw3_c:
  411:        /* Place your implementation here */ 
  412:      break;
  413:      
  414:      case gSw4_c:
  415:        /* Place your implementation here */ 
  416:      break;
  417:      
  418:      case gSw5_c:
  419:        /* Place your implementation here */ 
  420:      break;
  421:      
  422:      case gSw6_c:
  423:        /* Place your implementation here */ 
  424:      break;
  425:      
  426:      case gSw7_c:
  427:        /* Place your implementation here */ 
  428:      break;
  429:      
  430:      case gSw8_c:
  431:        /* Place your implementation here */ 
  432:      break;
  433:  
  434:  #if gTargetBoard_c == gMc1323xRcm_c     
  435:      case gSw9_c:
  436:        /* Place your implementation here */ 
  437:      break;
  438:      
  439:      case gSw10_c:
  440:        /* Place your implementation here */ 
  441:      break;
  442:      
  443:      case gSw11_c:
  444:        /* Place your implementation here */
  445:      break;
  446:      
  447:      case gSw12_c:
  448:        /* Place your implementation here */ 
  449:      break;
  450:      
  451:      case gSw13_c:
  452:        /* Place your implementation here */ 
  453:      break;
  454:      
  455:      case gSw14_c:
  456:        /* Place your implementation here */
  457:      break;
  458:      
  459:      case gSw15_c:
  460:        /* Place your implementation here */
  461:      break;
  462:      
  463:      case gSw16_c:
  464:        /* Place your implementation here */ 
  465:      break;
  466:      
  467:      case gSw17_c:
  468:        /* Place your implementation here */ 
  469:      break;
  470:      
  471:      case gSw18_c:
  472:        /* Place your implementation here */
  473:      break;
  474:      
  475:      case gSw19_c:
  476:        /* Place your implementation here */
  477:      break;
  478:      
  479:      case gSw20_c:
  480:        /* Place your implementation here */ 
  481:      break;
  482:      
  483:      case gSw21_c:
  484:        /* Place your implementation here */ 
  485:      break;
  486:      
  487:      case gSw22_c:
  488:        /* Place your implementation here */ 
  489:      break;
  490:      
  491:      case gSw23_c:
  492:        /* Place your implementation here */
  493:      break;
  494:      
  495:      case gSw24_c:
  496:        /* Place your implementation here */ 
  497:      break;
  498:      
  499:      case gSw25_c:
  500:        /* Place your implementation here */ 
  501:      break;
  502:      
  503:      case gSw26_c:
  504:        /* Place your implementation here */ 
  505:      break;
  506:      
  507:      case gSw27_c:
  508:        /* Place your implementation here */ 
  509:      break;
  510:      
  511:      case gSw28_c:
  512:        /* Place your implementation here */ 
  513:      break;
  514:      
  515:      case gSw29_c:
  516:        /* Place your implementation here */ 
  517:      break;
  518:      
  519:      case gSk1_c:
  520:        /* Place your implementation here */ 
  521:      break;
  522:      
  523:      case gSk2_c:
  524:        /* Place your implementation here */ 
  525:      break;
  526:      
  527:      case gSk3_c:
  528:        /* Place your implementation here */ 
  529:      break;
  530:      
  531:      case gSk4_c:
  532:        /* Place your implementation here */ 
  533:      break;
  534:      
  535:  #endif    
  536:      
  537:      default:
  538:        /* Place your implementation here */ 
  539:      break;
  540:     }
  541:         
  542:  }
  543:  #endif
  544:  
  545:  /************************************************************************************
  546:  * LCDCallback
  547:  * 
  548:  *
  549:  *
  550:  ************************************************************************************/
  551:  void LCDCallback(lcdErrors_t lcdError)
  552:  {
  553:    (void)lcdError;
  554:  }
  0000 81       [6]             RTS   
  555:  
  556:  
  557:  /************************************************************************************
  558:  * SMAC Callbacks
  559:  ************************************************************************************/
  560:  
  561:  /************************************************************************************
  562:  * MCPSDataComfirm
  563:  * 
  564:  *
  565:  *
  566:  ************************************************************************************/
  567:  void MCPSDataComfirm(txStatus_t TransmissionResult)
  568:  {  
  0000 87       [2]             PSHA  
  569:      Otap_OpcMCPSDataComfirm(&TransmissionResult);
  0001 95       [2]             TSX   
  0002 cd0000   [6]             JSR   Otap_OpcMCPSDataComfirm
  570:      bTxDone = TRUE;
  0005 a601     [2]             LDA   #1
  0007 c70000   [4]             STA   bTxDone
  571:  }
  000a 8a       [3]             PULH  
  000b 81       [6]             RTS   
  572:   
  573:  
  574:  /************************************************************************************
  575:  * MCPSDataIndication
  576:  * 
  577:  *
  578:  *
  579:  ************************************************************************************/
  580:  void MCPSDataIndication(rxPacket_t *gsRxPacket)
  581:  {  
  582:    Otap_OpcMCPSDataIndication(gsRxPacket);
  0000 cd0000   [6]             JSR   Otap_OpcMCPSDataIndication
  583:    bRxDone = TRUE;
  0003 a601     [2]             LDA   #1
  0005 c70000   [4]             STA   bRxDone
  584:  }
  0008 81       [6]             RTS   
  585:  
  586:  
  587:  /************************************************************************************
  588:  * MLMEScanComfirm
  589:  * 
  590:  *
  591:  *
  592:  ************************************************************************************/
  593:  void MLMEScanComfirm(channels_t ClearestChann)
  594:  {
  595:    bestChannel = ClearestChann; 
  0000 c70000   [4]             STA   bestChannel
  596:    bScanDone = TRUE;
  0003 a601     [2]             LDA   #1
  0005 c70000   [4]             STA   bScanDone
  597:  }
  0008 81       [6]             RTS   
  598:  
  599:  /************************************************************************************
  600:  * MLMEResetIndication
  601:  * 
  602:  *
  603:  *
  604:  ************************************************************************************/
  605:  void MLMEResetIndication(void)
  606:  {
  607:    
  608:  }
  0000 81       [6]             RTS   
  609:  
  610:  /************************************************************************************
  611:  * MLMEWakeComfirm
  612:  * 
  613:  *
  614:  *
  615:  ************************************************************************************/
  616:  void MLMEWakeComfirm(void)
  617:  {
  618:    
  619:  }
  0000 81       [6]             RTS   
  620:  
  621:  
  622:  
  623:  #pragma CODE_SEG DEFAULT
  624:  
  625:  
  626:  
  627:  
  628:  
  629:  
