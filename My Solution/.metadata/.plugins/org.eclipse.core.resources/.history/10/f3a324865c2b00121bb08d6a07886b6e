ANSI-C/cC++ Compiler for HC08 V-5.0.39 Build 11346, Dec 13 2011

    1:  /*****************************************************************************                   
    2:  * Buzzer driver implementation.
    3:  * Driver to manage the buzzer of the following boards:
    4:  *   1320x-QE128-EVB
    5:  *   1321x-SRB and NCB
    6:  *   1323x RCM
    7:  * 
    8:  * Copyright (c) 2010, Freescale, Inc. All rights reserved.
    9:  *
   10:  * 
   11:  * No part of this document must be reproduced in any form - including copied,
   12:  * transcribed, printed or by any electronic means - without specific written
   13:  * permission from Freescale Semiconductor.
   14:  *
   15:  *****************************************************************************/
   16:  
   17:  
   18:  #include "Buzzer.h"
   19:  
   20:  /************************************************************************************
   21:  *************************************************************************************
   22:  * Public memory declarations
   23:  *************************************************************************************
   24:  ************************************************************************************/
   25:  
   26:  bool_t gBuzzerBusy;
   27:  
   28:  
   29:  #if gBuzzerSupported_d == TRUE
   30:  
   31:  /************************************************************************************
   32:  *************************************************************************************
   33:  * Private memory declarations
   34:  *************************************************************************************
   35:  ************************************************************************************/
   36:    
   37:  static uint16_t mPulseWidth;                         //Beep Volume
   38:  static uint16_t mPulseFreq;                          //Beep Tone
   39:  static uint16_t mTempPulseWidth;
   40:  static uint16_t mTempPulseFreq;                      //Beep Tone
   41:  static tmrChannelConfig_t mBuzzerTimerConfig;   
   42:  static uint16_t mDefaultFreq; 
   43:  static uint16_t mDefaultWidth;
   44:  static bool_t mPeriodState;
   45:  static uint16_t mTimerRounds;
   46:  static uint16_t mCountPeriod;
   47:  static bool_t mBuzzerBeepFlag;
   48:  
   49:  
   50:  
   51:  /************************************************************************************
   52:  *************************************************************************************
   53:  * Interface functions
   54:  *************************************************************************************
   55:  ************************************************************************************/
   56:  /******************************************************************************
   57:  * Buzzer_Init 
   58:  *
   59:  *******************************************************************************/
   60:  
   61:  void Buzzer_Init(void)
   62:  {    
  0000 a7fe     [2]             AIS   #-2
   63:      /*Timer configuration*/
   64:      
   65:      mBuzzerTimerConfig.tmrChannel = gBuzzerTimerChannel_c;
  0002 a604     [2]             LDA   #4
  0004 450000   [3]             LDHX  @mBuzzerTimerConfig
  0007 f7       [2]             STA   ,X
   66:      mBuzzerTimerConfig.tmrChannOptMode= gTmrOutputCompare_c;
  0008 a601     [2]             LDA   #1
  000a e701     [3]             STA   1,X
   67:      mBuzzerTimerConfig.tmrPinConfig.tmrOutCompState = gTmrPinNotUsedForOutComp_c;
  000c 4f       [1]             CLRA  
  000d e702     [3]             STA   2,X
   68:      (void)Tmr_SetCallbackFunc(gBuzzerTimer_c, gBuzzerTimerInterruptSource_c, (tmrCallbackFunction_t)Buzzer_TimerEvent);
  000f a602     [2]             LDA   #2
  0011 87       [2]             PSHA  
  0012 a605     [2]             LDA   #5
  0014 450000   [3]             LDHX  @Buzzer_TimerEvent
  0017 cd0000   [6]             JSR   Tmr_SetCallbackFunc
  001a 8a       [3]             PULH  
   69:      (void)Tmr_SetChannelConfig(gBuzzerTimer_c, &mBuzzerTimerConfig);
  001b a602     [2]             LDA   #2
  001d 450000   [3]             LDHX  @mBuzzerTimerConfig
  0020 cd0000   [6]             JSR   Tmr_SetChannelConfig
   70:      mDefaultFreq = mBuzzerTone6_c;
  0023 ae91     [2]             LDX   #-111
  0025 8c       [1]             CLRH  
  0026 960000   [5]             STHX  mDefaultFreq
   71:      mPulseFreq = mDefaultFreq;
  0029 960000   [5]             STHX  mPulseFreq
   72:      mDefaultWidth = pulseWidth(mDefaultFreq, Buzzer_ValidateVol(gBuzzerVolume1_c));
  002c 4f       [1]             CLRA  
  002d ac000000 [8]             CALL  Buzzer_ValidateVol
  0031 9eff01   [5]             STHX  1,SP
  0034 320000   [5]             LDHX  mDefaultFreq
  0037 89       [2]             PSHX  
  0038 8b       [2]             PSHH  
  0039 9efe03   [5]             LDHX  3,SP
  003c cd0000   [6]             JSR   _IMUL_STAR08
  003f a702     [2]             AIS   #2
  0041 89       [2]             PSHX  
  0042 8b       [2]             PSHH  
  0043 ae64     [2]             LDX   #100
  0045 8c       [1]             CLRH  
  0046 cd0000   [6]             JSR   _IDIVU_STAR08
  0049 a702     [2]             AIS   #2
  004b 960000   [5]             STHX  mDefaultWidth
   73:      mPulseWidth = mDefaultWidth;
  004e 960000   [5]             STHX  mPulseWidth
   74:      mPeriodState = FALSE;
  0051 4f       [1]             CLRA  
  0052 c70000   [4]             STA   mPeriodState
   75:      gBuzzerBusy = FALSE;
  0055 c70000   [4]             STA   gBuzzerBusy
   76:      mCountPeriod = 0;  
  0058 8c       [1]             CLRH  
  0059 5f       [1]             CLRX  
  005a 960000   [5]             STHX  mCountPeriod
   77:  }
  005d a702     [2]             AIS   #2
  005f 8d       [7]             RTC   
   78:  
   79:  /******************************************************************************
   80:  * Buzzer_ShortBeep 
   81:  *
   82:  *******************************************************************************/
   83:  
   84:  void Buzzer_ShortBeep(void)
   85:  {
  0000 8b       [2]             PSHH  
   86:    mCountPeriod = 0;
  0001 5f       [1]             CLRX  
  0002 8c       [1]             CLRH  
  0003 960000   [5]             STHX  mCountPeriod
   87:    mTimerRounds = (uint16_t)calculateTimerRounds(gShortBeepLength_c);
  0006 457a12   [3]             LDHX  #31250
  0009 89       [2]             PSHX  
  000a 8b       [2]             PSHH  
  000b 320000   [5]             LDHX  mPulseFreq
  000e cd0000   [6]             JSR   _IDIVU_STAR08
  0011 a702     [2]             AIS   #2
  0013 58       [1]             LSLX  
  0014 8b       [2]             PSHH  
  0015 86       [3]             PULA  
  0016 49       [1]             ROLA  
  0017 87       [2]             PSHA  
  0018 8a       [3]             PULH  
  0019 960000   [5]             STHX  mTimerRounds
   88:    lowPeriodTimer();
  001c 4f       [1]             CLRA  
  001d c70000   [4]             STA   mPeriodState
  0020 ae04     [2]             LDX   #4
  0022 9f       [1]             TXA   
  0023 ac000000 [8]             CALL  Gpio_PinClear
  0027 a601     [2]             LDA   #1
  0029 c70000   [4]             STA   gBuzzerBusy
  002c 4c       [1]             INCA  
  002d 87       [2]             PSHA  
  002e c60001   [4]             LDA   mPulseFreq:1
  0031 c00001   [4]             SUB   mPulseWidth:1
  0034 95       [2]             TSX   
  0035 e701     [3]             STA   1,X
  0037 c60000   [4]             LDA   mPulseFreq
  003a c20000   [4]             SBC   mPulseWidth
  003d ee01     [3]             LDX   1,X
  003f 87       [2]             PSHA  
  0040 8a       [3]             PULH  
  0041 a607     [2]             LDA   #7
  0043 cd0000   [6]             JSR   Tmr_Enable
   89:  }
  0046 a702     [2]             AIS   #2
  0048 8d       [7]             RTC   
   90:  
   91:  /******************************************************************************
   92:  * Buzzer_LongBeep 
   93:  *
   94:  *******************************************************************************/
   95:  
   96:  void Buzzer_LongBeep(void)
   97:  {
  0000 a7fd     [2]             AIS   #-3
   98:    mCountPeriod = 0;
  0002 5f       [1]             CLRX  
  0003 8c       [1]             CLRH  
  0004 960000   [5]             STHX  mCountPeriod
   99:    mTimerRounds = (uint16_t)calculateTimerRounds(gLongBeepLength_c);
  0007 457a12   [3]             LDHX  #31250
  000a 89       [2]             PSHX  
  000b 8b       [2]             PSHH  
  000c 320000   [5]             LDHX  mPulseFreq
  000f cd0000   [6]             JSR   _IDIVU_STAR08
  0012 a702     [2]             AIS   #2
  0014 9eff02   [5]             STHX  2,SP
  0017 ae06     [2]             LDX   #6
  0019 8c       [1]             CLRH  
  001a 89       [2]             PSHX  
  001b 8b       [2]             PSHH  
  001c 9efe04   [5]             LDHX  4,SP
  001f cd0000   [6]             JSR   _IMUL_STAR08
  0022 a702     [2]             AIS   #2
  0024 960000   [5]             STHX  mTimerRounds
  100:    lowPeriodTimer();
  0027 4f       [1]             CLRA  
  0028 c70000   [4]             STA   mPeriodState
  002b ae04     [2]             LDX   #4
  002d 9f       [1]             TXA   
  002e ac000000 [8]             CALL  Gpio_PinClear
  0032 a601     [2]             LDA   #1
  0034 c70000   [4]             STA   gBuzzerBusy
  0037 4c       [1]             INCA  
  0038 87       [2]             PSHA  
  0039 c60001   [4]             LDA   mPulseFreq:1
  003c c00001   [4]             SUB   mPulseWidth:1
  003f 95       [2]             TSX   
  0040 e701     [3]             STA   1,X
  0042 c60000   [4]             LDA   mPulseFreq
  0045 c20000   [4]             SBC   mPulseWidth
  0048 ee01     [3]             LDX   1,X
  004a 87       [2]             PSHA  
  004b 8a       [3]             PULH  
  004c a607     [2]             LDA   #7
  004e cd0000   [6]             JSR   Tmr_Enable
  101:    
  102:  }
  0051 a704     [2]             AIS   #4
  0053 8d       [7]             RTC   
  103:  
  104:  /******************************************************************************
  105:  * Buzzer_SetBeepTone 
  106:  *
  107:  *******************************************************************************/
  108:  
  109:  void Buzzer_SetBeepTone(buzzerTone_t beepTone)
  110:  {
  111:    mPulseFreq = Buzzer_ValidateTone(beepTone);  
  0000 ac000000 [8]             CALL  Buzzer_ValidateTone
  0004 960000   [5]             STHX  mPulseFreq
  112:  }
  0007 8d       [7]             RTC   
  113:  
  114:  /******************************************************************************
  115:  * Buzzer_SetBeepVolume 
  116:  *
  117:  *******************************************************************************/
  118:  
  119:  void Buzzer_SetBeepVolume(buzzerVolume_t beepVol)
  120:  {
  121:    mPulseWidth = Buzzer_ValidateVol(beepVol);
  0000 ac000000 [8]             CALL  Buzzer_ValidateVol
  0004 960000   [5]             STHX  mPulseWidth
  122:  
  123:  }
  0007 8d       [7]             RTC   
  124:  
  125:  /******************************************************************************
  126:  * Buzzer_Beep
  127:  *
  128:  *******************************************************************************/
  129:  
  130:  void Buzzer_Beep(uint8_t beepSecs, buzzerTone_t beepTone, buzzerVolume_t beepVol)
  131:  {
  0000 87       [2]             PSHA  
  0001 a7fb     [2]             AIS   #-5
  132:    mBuzzerBeepFlag = TRUE;
  0003 a601     [2]             LDA   #1
  0005 c70000   [4]             STA   mBuzzerBeepFlag
  133:    mTempPulseFreq = mPulseFreq;
  0008 9f       [1]             TXA   
  0009 320000   [5]             LDHX  mPulseFreq
  000c 960000   [5]             STHX  mTempPulseFreq
  134:    mTempPulseWidth = mPulseWidth;
  000f 320000   [5]             LDHX  mPulseWidth
  0012 960000   [5]             STHX  mTempPulseWidth
  135:    mPulseFreq = Buzzer_ValidateTone(beepTone);
  0015 ac000000 [8]             CALL  Buzzer_ValidateTone
  0019 960000   [5]             STHX  mPulseFreq
  136:    mPulseWidth = pulseWidth(mPulseFreq, Buzzer_ValidateVol(beepVol));
  001c 95       [2]             TSX   
  001d e605     [3]             LDA   5,X
  001f ac000000 [8]             CALL  Buzzer_ValidateVol
  0023 9eff02   [5]             STHX  2,SP
  0026 320000   [5]             LDHX  mPulseFreq
  0029 89       [2]             PSHX  
  002a 8b       [2]             PSHH  
  002b 9eff06   [5]             STHX  6,SP
  002e 9efe04   [5]             LDHX  4,SP
  0031 cd0000   [6]             JSR   _IMUL_STAR08
  0034 a702     [2]             AIS   #2
  0036 89       [2]             PSHX  
  0037 8b       [2]             PSHH  
  0038 ae64     [2]             LDX   #100
  003a 8c       [1]             CLRH  
  003b cd0000   [6]             JSR   _IDIVU_STAR08
  003e a702     [2]             AIS   #2
  0040 960000   [5]             STHX  mPulseWidth
  137:    mCountPeriod = 0;
  0043 5f       [1]             CLRX  
  0044 8c       [1]             CLRH  
  0045 960000   [5]             STHX  mCountPeriod
  138:    mTimerRounds = (uint16_t)calculateTimerRounds(beepSecs);
  0048 457a12   [3]             LDHX  #31250
  004b 89       [2]             PSHX  
  004c 8b       [2]             PSHH  
  004d 9efe06   [5]             LDHX  6,SP
  0050 cd0000   [6]             JSR   _IDIVU_STAR08
  0053 a702     [2]             AIS   #2
  0055 58       [1]             LSLX  
  0056 8b       [2]             PSHH  
  0057 86       [3]             PULA  
  0058 49       [1]             ROLA  
  0059 9ee701   [4]             STA   1,SP
  005c 9ee60a   [4]             LDA   10,SP
  005f 87       [2]             PSHA  
  0060 4f       [1]             CLRA  
  0061 87       [2]             PSHA  
  0062 9ee603   [4]             LDA   3,SP
  0065 87       [2]             PSHA  
  0066 8a       [3]             PULH  
  0067 cd0000   [6]             JSR   _IMUL_STAR08
  006a a702     [2]             AIS   #2
  006c 960000   [5]             STHX  mTimerRounds
  139:    lowPeriodTimer(); 
  006f 4f       [1]             CLRA  
  0070 c70000   [4]             STA   mPeriodState
  0073 ae04     [2]             LDX   #4
  0075 9f       [1]             TXA   
  0076 ac000000 [8]             CALL  Gpio_PinClear
  007a a601     [2]             LDA   #1
  007c c70000   [4]             STA   gBuzzerBusy
  007f 4c       [1]             INCA  
  0080 87       [2]             PSHA  
  0081 c60001   [4]             LDA   mPulseFreq:1
  0084 c00001   [4]             SUB   mPulseWidth:1
  0087 95       [2]             TSX   
  0088 e701     [3]             STA   1,X
  008a c60000   [4]             LDA   mPulseFreq
  008d c20000   [4]             SBC   mPulseWidth
  0090 ee01     [3]             LDX   1,X
  0092 87       [2]             PSHA  
  0093 8a       [3]             PULH  
  0094 a607     [2]             LDA   #7
  0096 cd0000   [6]             JSR   Tmr_Enable
  140:  
  141:  }
  0099 a707     [2]             AIS   #7
  009b 8d       [7]             RTC   
  142:  
  143:  #ifdef MEMORY_MODEL_BANKED
  144:  #pragma CODE_SEG __NEAR_SEG NON_BANKED
  145:  #else
  146:  #pragma CODE_SEG DEFAULT
  147:  #endif 
  148:  
  149:  
  150:  /************************************************************************************
  151:  *************************************************************************************
  152:  * Module functions
  153:  *************************************************************************************
  154:  ************************************************************************************/
  155:  
  156:  void Buzzer_TimerEvent(void)
  157:  {  
  0000 8b       [2]             PSHH  
  158:    
  159:    if(mCountPeriod == mTimerRounds)
  0001 320000   [5]             LDHX  mTimerRounds
  0004 3e0000   [6]             CPHX  mCountPeriod
  0007 261c     [3]             BNE   L25 ;abs = 0025
  160:    { 
  161:      (void)Tmr_Disable(gBuzzerTimer_c);
  0009 a602     [2]             LDA   #2
  000b cd0000   [6]             JSR   Tmr_Disable
  162:          
  163:      if(mBuzzerBeepFlag)
  000e c60000   [4]             LDA   mBuzzerBeepFlag
  0011 270c     [3]             BEQ   L1F ;abs = 001f
  164:      {
  165:        mPulseFreq = mTempPulseFreq;
  0013 320000   [5]             LDHX  mTempPulseFreq
  0016 960000   [5]             STHX  mPulseFreq
  166:        mPulseWidth = mTempPulseWidth;    
  0019 320000   [5]             LDHX  mTempPulseWidth
  001c 960000   [5]             STHX  mPulseWidth
  001f          L1F:    
  167:      }
  168:      gBuzzerBusy = FALSE; 
  001f 4f       [1]             CLRA  
  0020 c70000   [4]             STA   gBuzzerBusy
  169:      
  170:    }
  171:    else
  172:    {  
  173:      if(mPeriodState)
  174:      {
  175:        mCountPeriod += 1;
  176:        lowPeriodTimer();       
  177:      }
  178:      else
  179:      {
  180:        highPeriodTimer();
  181:              
  182:      }
  183:     
  184:    }
  185:    
  186:  }
  0023 8a       [3]             PULH  
  0024 81       [6]             RTS   
  0025          L25:    
  0025 c60000   [4]             LDA   mPeriodState
  0028 2731     [3]             BEQ   L5B ;abs = 005b
  002a 450000   [3]             LDHX  @mCountPeriod
  002d 6c01     [5]             INC   1,X
  002f 2601     [3]             BNE   L32 ;abs = 0032
  0031 7c       [4]             INC   ,X
  0032          L32:    
  0032 4f       [1]             CLRA  
  0033 c70000   [4]             STA   mPeriodState
  0036 ae04     [2]             LDX   #4
  0038 9f       [1]             TXA   
  0039 ac000000 [8]             CALL  Gpio_PinClear
  003d a601     [2]             LDA   #1
  003f c70000   [4]             STA   gBuzzerBusy
  0042 4c       [1]             INCA  
  0043 87       [2]             PSHA  
  0044 c60001   [4]             LDA   mPulseFreq:1
  0047 c00001   [4]             SUB   mPulseWidth:1
  004a 95       [2]             TSX   
  004b e701     [3]             STA   1,X
  004d c60000   [4]             LDA   mPulseFreq
  0050 c20000   [4]             SBC   mPulseWidth
  0053 ee01     [3]             LDX   1,X
  0055 87       [2]             PSHA  
  0056 8a       [3]             PULH  
  0057 a607     [2]             LDA   #7
  0059 2014     [3]             BRA   L6F ;abs = 006f
  005b          L5B:    
  005b a601     [2]             LDA   #1
  005d c70000   [4]             STA   mPeriodState
  0060 ae04     [2]             LDX   #4
  0062 9f       [1]             TXA   
  0063 ac000000 [8]             CALL  Gpio_PinSet
  0067 a602     [2]             LDA   #2
  0069 87       [2]             PSHA  
  006a a607     [2]             LDA   #7
  006c 320000   [5]             LDHX  mPulseWidth
  006f          L6F:    
  006f cd0000   [6]             JSR   Tmr_Enable
  0072 8a       [3]             PULH  
  0073 8a       [3]             PULH  
  0074 81       [6]             RTS   
  187:  
  188:  /***********************************************************************************/
  189:  
  190:  #pragma CODE_SEG DEFAULT
  191:  
  192:  uint16_t Buzzer_ValidateTone(buzzerTone_t tone)
  193:  {
  194:    switch (tone)
  0000 a109     [2]             CMP   #9
  0002 221e     [3]             BHI   L22 ;abs = 0022
  0004 4d       [1]             TSTA  
  0005 271b     [3]             BEQ   L22 ;abs = 0022
  0007 41011c   [4]             CBEQA #1,L26 ;abs = 0026
  000a 41021d   [4]             CBEQA #2,L2A ;abs = 002a
  000d 41031e   [4]             CBEQA #3,L2E ;abs = 002e
  0010 41041f   [4]             CBEQA #4,L32 ;abs = 0032
  0013 410520   [4]             CBEQA #5,L36 ;abs = 0036
  0016 410621   [4]             CBEQA #6,L3A ;abs = 003a
  0019 410722   [4]             CBEQA #7,L3E ;abs = 003e
  001c 410823   [4]             CBEQA #8,L42 ;abs = 0042
  001f 410924   [4]             CBEQA #9,L46 ;abs = 0046
  0022          L22:    
  195:    {
  196:      case gBuzzerTone1_c:
  197:        return mBuzzerTone1_c;
  0022 ae10     [2]             LDX   #16
  0024 8c       [1]             CLRH  
  0025 8d       [7]             RTC   
  0026          L26:    
  198:      break;
  199:      
  200:      case gBuzzerTone2_c:
  201:        return mBuzzerTone2_c;
  0026 ae20     [2]             LDX   #32
  0028 8c       [1]             CLRH  
  0029 8d       [7]             RTC   
  002a          L2A:    
  202:      break;
  203:      
  204:      case gBuzzerTone3_c:
  205:        return mBuzzerTone3_c;
  002a ae30     [2]             LDX   #48
  002c 8c       [1]             CLRH  
  002d 8d       [7]             RTC   
  002e          L2E:    
  206:      break;
  207:      
  208:      case gBuzzerTone4_c:
  209:        return mBuzzerTone4_c;
  002e ae40     [2]             LDX   #64
  0030 8c       [1]             CLRH  
  0031 8d       [7]             RTC   
  0032          L32:    
  210:      break;
  211:      
  212:      case gBuzzerTone5_c:
  213:        return mBuzzerTone5_c;
  0032 ae82     [2]             LDX   #-126
  0034 8c       [1]             CLRH  
  0035 8d       [7]             RTC   
  0036          L36:    
  214:      break;
  215:      
  216:      case gBuzzerTone6_c:
  217:        return mBuzzerTone6_c;
  0036 ae91     [2]             LDX   #-111
  0038 8c       [1]             CLRH  
  0039 8d       [7]             RTC   
  003a          L3A:    
  218:      break;
  219:      
  220:      case gBuzzerTone7_c:
  221:        return mBuzzerTone7_c;
  003a aea0     [2]             LDX   #-96
  003c 8c       [1]             CLRH  
  003d 8d       [7]             RTC   
  003e          L3E:    
  222:      break;
  223:      
  224:      case gBuzzerTone8_c:
  225:        return mBuzzerTone8_c;
  003e aeb2     [2]             LDX   #-78
  0040 8c       [1]             CLRH  
  0041 8d       [7]             RTC   
  0042          L42:    
  226:      break;
  227:      
  228:      case gBuzzerTone9_c:
  229:        return mBuzzerTone9_c;
  0042 aec0     [2]             LDX   #-64
  0044 8c       [1]             CLRH  
  0045 8d       [7]             RTC   
  0046          L46:    
  230:      break;
  231:      
  232:      case gBuzzerTone10_c:
  233:        return mBuzzerTone10_c;
  0046 aef0     [2]             LDX   #-16
  0048 8c       [1]             CLRH  
  234:      break;
  235:      
  236:      default:
  237:        return mBuzzerTone1_c;
  238:      break;
  239:      
  240:    }
  241:    
  242:  }
  0049 8d       [7]             RTC   
  243:  
  244:  /***********************************************************************************/
  245:  
  246:  uint16_t Buzzer_ValidateVol(buzzerVolume_t volume)
  247:  {
  0000 a7fe     [2]             AIS   #-2
  248:    return ((volume + 1) * 15);
  0002 8c       [1]             CLRH  
  0003 97       [1]             TAX   
  0004 af01     [2]             AIX   #1
  0006 9eff01   [5]             STHX  1,SP
  0009 ae0f     [2]             LDX   #15
  000b 8c       [1]             CLRH  
  000c 89       [2]             PSHX  
  000d 8b       [2]             PSHH  
  000e 9efe03   [5]             LDHX  3,SP
  0011 cd0000   [6]             JSR   _IMUL_STAR08
  249:  }
  0014 a704     [2]             AIS   #4
  0016 8d       [7]             RTC   
  250:  
  251:  #else
  252:  
  253:  
  254:  /************************************************************************************
  255:  *************************************************************************************
  256:  * Interface functions
  257:  *************************************************************************************
  258:  ************************************************************************************/
  259:  /******************************************************************************
  260:  * Buzzer_Init 
  261:  *
  262:  *******************************************************************************/
  263:  
  264:  void Buzzer_Init(void)
  265:  {    
  266:      
  267:  }
  268:  
  269:  /******************************************************************************
  270:  * Buzzer_ShortBeep 
  271:  *
  272:  *******************************************************************************/
  273:  
  274:  void Buzzer_ShortBeep(void)
  275:  {
  276:    
  277:  }
  278:  
  279:  /******************************************************************************
  280:  * Buzzer_LongBeep 
  281:  *
  282:  *******************************************************************************/
  283:  
  284:  void Buzzer_LongBeep(void)
  285:  {
  286:    
  287:  }
  288:  
  289:  /******************************************************************************
  290:  * Buzzer_SetBeepTone 
  291:  *
  292:  *******************************************************************************/
  293:  
  294:  void Buzzer_SetBeepTone(buzzerTone_t beepTone)
  295:  {
  296:      (void)beepTone;
  297:  }
  298:  
  299:  /******************************************************************************
  300:  * Buzzer_SetBeepVolume 
  301:  *
  302:  *******************************************************************************/
  303:  
  304:  void Buzzer_SetBeepVolume(buzzerVolume_t beepVol)
  305:  {                    
  306:      (void)beepVol;
  307:  }
  308:  
  309:  /******************************************************************************
  310:  * Buzzer_Beep
  311:  *
  312:  *******************************************************************************/
  313:  
  314:  void Buzzer_Beep(uint8_t beepSecs, buzzerTone_t beepTone, buzzerVolume_t beepVol)
  315:  {
  316:      (void)beepSecs;
  317:      (void)beepTone;
  318:      (void)beepVol;                  
  319:  }
  320:  
  321:  #endif
  322:  
  323:   
  324:  
